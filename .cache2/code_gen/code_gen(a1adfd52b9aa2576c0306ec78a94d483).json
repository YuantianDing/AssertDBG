{"in": {"attempt": -1, "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "largest_prime_factor", "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert isinstance(n, int) and n > 1, f\"Input `n` must be an integer greater than 1, but got {n}.\"\n    \n    prime_factors = []\n    max_prime_factor = 1\n    \n    factors = get_factors(n)\n    assert all(isinstance(factor, int) for factor in factors), f\"All factors should be integers, but got {factors}.\"\n    \n    for factor in factors:\n        assert isinstance(factor, int) and 1 < factor <= n, f\"Factor {factor} is invalid for n={n}.\"\n        if is_prime(factor):\n            assert is_prime(factor), f\"Factor {factor} should be prime, but is_prime returned False.\"\n            prime_factors.append(factor)\n    \n    if prime_factors:\n        max_prime_factor = max(prime_factors)\n        assert max_prime_factor in prime_factors, f\"Max prime factor {max_prime_factor} is not in the list of prime factors {prime_factors}.\"\n    \n    assert max_prime_factor > 1, f\"Max prime factor must be greater than 1, got {max_prime_factor} for n={n}.\"\n    return max_prime_factor\n\n# Placeholder functions for `get_factors` and `is_prime`\ndef get_factors(n):\n    # Implementation here\n    pass\n\ndef is_prime(n):\n    # Implementation here\n    pass\n"}, "subfunctions": [{"function_name": "get_factors", "code": "def get_factors(num: int) -> list:\n    \"\"\"\n    Generate all factors of a given number.\n    :param num: Integer to find the factors of.\n    :return: A list of all factors of num.\n    \"\"\"\n    assert isinstance(num, int), f\"Input num should be an integer, got {type(num).__name__}.\"\n    assert num > 1, \"Input number should be greater than 1.\"\n    \n    factors = []\n    for i in range(1, int(num**0.5) + 1):\n        assert 1 <= i <= int(num**0.5) + 1, f\"Loop variable i is out of expected range: {i}.\"\n        if num % i == 0:\n            factors.append(i)\n            if i != num // i:  # Avoid adding the square root twice if num is a perfect square\n                factors.append(num // i)\n            assert num % i == 0, f\"Loop invariant failed: {num} is not divisible by {i}.\"\n    factors.sort()  # Ensure the factors are in ascending order\n    \n    assert all(num % factor == 0 for factor in factors), f\"Not all items in {factors} are factors of {num}.\"\n    assert factors == sorted(factors), f\"The factors list is not sorted: {factors}.\"\n    return factors\n"}, {"function_name": "is_prime", "code": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n    :param num: Integer to check for primality.\n    :return: True if num is a prime number, False otherwise.\n    \"\"\"\n    assert isinstance(num, int), f\"Input must be an integer, got {type(num).__name__}.\"\n    assert num > 1, \"The number should be greater than 1.\"\n    \n    # A prime number is only divisible by 1 and itself.\n    if num <= 3:\n        return True\n    \n    # Eliminate even numbers and multiples of 3 immediately.\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # Check divisibility starting from 5 up to the square root of num.\n    i = 5\n    while i * i <= num:\n        assert i > 0, \"Loop variable i should be positive.\"\n        if num % i == 0 or num % (i + 2) == 0:  # Check i and i+2 skipping even numbers\n            return False\n        i += 6  # Increment by 6 to check only potential prime candidates\n    \n    assert num > 3, \"The number should be greater than 3 if reaches this point.\"\n    return True"}]}}