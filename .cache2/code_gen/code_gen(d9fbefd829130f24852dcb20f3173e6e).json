{"in": {"attempt": -1, "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "file_name_check", "code": "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if not _contains_excessive_digits(file_name):\n        return 'No'\n    if not _contains_single_dot(file_name):\n        return 'No'\n    name_part, extension_part = file_name.split('.')\n    if not _starts_with_letter(name_part):\n        return 'No'\n    if not _is_valid_extension(extension_part):\n        return 'No'\n    return 'Yes'\n"}, "subfunctions": [{"function_name": "_contains_excessive_digits", "code": "import re\n\ndef _contains_excessive_digits(file_name: str) -> bool:\n    \"\"\"Check if the file name exceeds three digits.\n    \n    Args:\n        file_name (str): The file name to check.\n\n    Returns:\n        bool: True if the file name contains three or fewer digits, False otherwise.\n    \"\"\"\n    # Use regular expression to count digits in the file name.\n    digits_count = len(re.findall(r'\\d', file_name))\n    # Return False if more than three digits are found, otherwise True.\n    return digits_count <= 3\n"}, {"function_name": "_contains_single_dot", "code": "def _contains_single_dot(file_name: str) -> bool:\n    \"\"\"Check if the file name contains exactly one dot.\n    \n    Args:\n        file_name (str): The file name to check.\n\n    Returns:\n        bool: True if there is exactly one dot, False otherwise.\n    \"\"\"\n    # Count the number of dots in the file name.\n    # If there is exactly one dot, return True; otherwise, return False.\n    return file_name.count('.') == 1"}, {"function_name": "_starts_with_letter", "code": "def _starts_with_letter(name_part: str) -> bool:\n    \"\"\"Check if the file name part before the dot starts with a letter.\n    \n    Args:\n        name_part (str): The substring of the file name before the dot.\n\n    Returns:\n        bool: True if the name part starts with a letter, False otherwise.\n    \"\"\"\n    # Check if the first character of the string is an alphabet letter\n    return name_part and name_part[0].isalpha()"}, {"function_name": "_is_valid_extension", "code": "def _is_valid_extension(extension_part: str) -> bool:\n    \"\"\"Check if the file extension is among the valid options.\n    \n    Args:\n        extension_part (str): The substring of the file name after the dot.\n\n    Returns:\n        bool: True if the extension is valid, False otherwise.\n    \"\"\"\n    # Define a set of valid extensions\n    valid_extensions = {'txt', 'exe', 'dll'}\n    # Return True if the given extension part is in the set of valid extensions\n    return extension_part in valid_extensions\n"}]}}