{"in": {"attempt": -1, "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "largest_prime_factor", "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors = factorize(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)\n"}, "subfunctions": [{"function_name": "factorize", "code": "import math\n\ndef factorize(n: int) -> list[int]:\n    \"\"\"Factorize a number into its factors.\n    Returns a list of factors.\n    \n    Args:\n        n (int): The number to factorize.\n\n    Returns:\n        list[int]: A list of factors of n.\n\n    Precondition:\n        n > 1\n    \"\"\"\n    factors = []\n    # Check all numbers from 1 up to the square root of n\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:  # If i is a factor\n            factors.append(i)\n            if i != n // i:  # To avoid adding the square root twice\n                factors.append(n // i)\n    factors.sort()\n    return factors"}, {"function_name": "is_prime", "code": "import math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is a prime number.\n    \n    Args:\n        num (int): The number to check for primality.\n\n    Returns:\n        bool: True if num is a prime number, False otherwise.\n\n    Precondition:\n        num > 1\n    \"\"\"\n    # Handle the smallest primes directly\n    if num in (2, 3):\n        return True\n    # Eliminate even numbers and multiples of 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    # Check numbers of the form 6k \u00b1 1\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True"}]}}