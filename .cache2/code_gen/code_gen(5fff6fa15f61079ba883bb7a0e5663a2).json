{"in": {"attempt": -1, "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "modp", "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    assert isinstance(n, int), f\"Expected 'n' to be an int, but got {type(n).__name__}.\"\n    assert isinstance(p, int), f\"Expected 'p' to be an int, but got {type(p).__name__}.\"\n    assert p > 0, f\"Expected 'p' to be greater than 0, but got {p}.\"\n    result = pow(2, n, p)\n    assert isinstance(result, int), f\"Expected 'result' to be an int, but got {type(result).__name__}.\"\n    assert 0 <= result < p, f\"Expected 'result' to be in the range [0, {p}), but got {result}.\"\n    return result\n"}, "subfunctions": []}}