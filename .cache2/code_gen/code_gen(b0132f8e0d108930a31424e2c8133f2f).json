{"in": {"attempt": -1, "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "check_dict_case", "code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Handle empty dictionary case directly\n    if not dict:\n        return False\n\n    # Split keys into categorically lowercase and uppercase\n    lowercase_keys = extract_lowercase_keys(dict)\n    uppercase_keys = extract_uppercase_keys(dict)\n    non_string_keys = extract_non_string_keys(dict)\n\n    # Check if all keys are valid and categorized properly\n    if non_string_keys:\n        return False\n    return len(lowercase_keys) == len(dict) or len(uppercase_keys) == len(dict)\n"}, "subfunctions": [{"function_name": "extract_lowercase_keys", "code": "def extract_lowercase_keys(d: dict) -> list:\n    \"\"\"\n    Extracts all lowercase string keys from the dictionary.\n    Args:\n    - d (dict): The dictionary to extract keys from.\n\n    Returns:\n    - List of keys that are lowercase strings.\n    \"\"\"\n    # List to store the lowercase keys\n    lowercase_keys = []\n    \n    # Iterate over each key in the dictionary\n    for key in d.keys():\n        # Check if the key is a string and is lowercase\n        if isinstance(key, str) and key.islower():\n            lowercase_keys.append(key)\n\n    return lowercase_keys"}, {"function_name": "extract_uppercase_keys", "code": "def extract_uppercase_keys(d: dict) -> list:\n    \"\"\"\n    Extracts all uppercase string keys from the dictionary.\n    Args:\n    - d (dict): The dictionary to extract keys from.\n\n    Returns:\n    - List of keys that are uppercase strings.\n    \"\"\"\n    # Initialize an empty list to store uppercase string keys\n    uppercase_keys = []\n    \n    # Iterate through each key in the dictionary\n    for key in d.keys():\n        # Check if the key is a string and in uppercase\n        if isinstance(key, str) and key.isupper():\n            uppercase_keys.append(key)\n    \n    return uppercase_keys"}, {"function_name": "extract_non_string_keys", "code": "def extract_non_string_keys(d: dict) -> list:\n    \"\"\"\n    Extracts all non-string keys from the dictionary.\n    Args:\n    - d (dict): The dictionary to extract keys from.\n\n    Returns:\n    - List of keys that are not strings.\n    \"\"\"\n    # Initialize a list to hold non-string keys\n    non_string_keys = []\n    \n    # Iterate through the keys in the dictionary\n    for key in d.keys():\n        # Check if the key is not a string\n        if not isinstance(key, str):\n            non_string_keys.append(key)\n    \n    return non_string_keys\n    "}]}}