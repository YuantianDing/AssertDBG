{"in": {"attempt": -1, "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "is_multiply_prime", "code": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    assert isinstance(a, int), f\"Input a must be an integer, got {type(a)}.\"\n    assert 0 <= a < 100, f\"Input must be a non-negative integer less than 100, got {a}.\"\n    \n    prime_numbers = list_primes_up_to(100)\n    assert all(isinstance(p, int) and p > 1 for p in prime_numbers), \"All elements in prime_numbers must be prime integers.\"\n    \n    for i in range(len(prime_numbers)):\n        p1 = prime_numbers[i]\n        assert isinstance(p1, int) and p1 > 1, f\"Expected a prime number, got {p1}.\"\n        for j in range(i, len(prime_numbers)):\n            p2 = prime_numbers[j]\n            assert isinstance(p2, int) and p2 >= p1, f\"Expected a prime number greater than or equal to {p1}, got {p2}.\"\n            for k in range(j, len(prime_numbers)):\n                p3 = prime_numbers[k]\n                assert isinstance(p3, int) and p3 >= p2, f\"Expected a prime number greater than or equal to {p2}, got {p3}.\"\n                product = p1 * p2 * p3\n                assert product >= p1 * p2, f\"Product should be non-decreasing, got {product} with factors {p1} and {p2}.\"\n                if product == a:\n                    return True\n    return False\n\n# Helper function\n\ndef list_primes_up_to(n: int) -> list:\n    assert n >= 2, f\"n should be at least 2, got {n}.\"\n    primes = []\n    for num in range(2, n+1):\n        for div in range(2, int(num**0.5) + 1):\n            if num % div == 0:\n                break\n        else:\n            primes.append(num)\n    return primes"}, "subfunctions": [{"function_name": "is_prime", "code": "import math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Determine if a number is a prime number.\n\n    :param num: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    assert isinstance(num, int), f\"Input must be an integer, got {type(num).__name__}\"\n    assert num >= 0, \"Number must be non-negative\"\n    \n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # Check divisibility from 5 to sqrt(num)\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        assert num % i != 0 or num % (i + 2) != 0, (\n            f\"Number {num} is not prime because it is divisible by {i} or {i + 2}\"\n        )\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    \n    assert num > 3, f\"Unexpected state, check logic; num should be greater than 3, got {num}\"\n    return True"}, {"function_name": "list_primes_up_to", "code": "import sympy\n\ndef list_primes_up_to(limit: int) -> list[int]:\n    \"\"\"\n    Generate a list of prime numbers up to a given limit.\n\n    :param limit: The upper limit to generate prime numbers.\n    :return: A list of prime numbers up to the limit.\n    \"\"\"\n    assert isinstance(limit, int), f\"Expected 'limit' to be an int, got {type(limit).__name__}\"\n    assert limit >= 2, \"Limit must be at least 2\"\n    prime_list = list(sympy.primerange(2, limit+1))\n    assert all(isinstance(prime, int) for prime in prime_list), \"All elements in the output must be integers\"\n    assert all(sympy.isprime(prime) for prime in prime_list), \"All elements in the output list must be prime numbers\"\n    assert prime_list == sorted(prime_list), \"Output list must be sorted in ascending order\"\n    assert all(prime <= limit for prime in prime_list), \"All primes in the output must be less than or equal to the limit\"\n    return prime_list\n"}]}}