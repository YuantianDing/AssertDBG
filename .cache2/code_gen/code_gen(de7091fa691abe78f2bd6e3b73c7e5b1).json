{"in": {"attempt": -1, "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "choose_num", "code": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    assert isinstance(x, int) and x > 0, f\"Expected x to be a positive integer, got {x}\"\n    assert isinstance(y, int) and y > 0, f\"Expected y to be a positive integer, got {y}\"\n\n    start, end = determine_start_end(x, y)\n    assert isinstance(start, int) and isinstance(end, int), f\"Expected start and end to be integers, got start={start}, end={end}\"\n    assert start <= end, f\"Expected start to be less than or equal to end, got start={start} and end={end}\"\n\n    result = find_biggest_even(start, end)\n    assert isinstance(result, int), f\"Expected result to be an integer, got result={result}\"\n    if result != -1:\n        assert result % 2 == 0, f\"Expected result to be an even number, got result={result}\"\n        assert start <= result <= end, f\"Expected result {result} to be in the range [{start}, {end}]\"\n    return result"}, "subfunctions": [{"function_name": "determine_start_end", "code": "def determine_start_end(x: int, y: int) -> tuple:\n    \"\"\"\n    Determine the start and end of the range based on x and y.\n    Returns a tuple (start, end) where start <= end.\n    \"\"\"\n    assert isinstance(x, int) and isinstance(y, int), \"Inputs must be integers: x = {}, y = {}\".format(x, y)\n    assert x > 0 and y > 0, \"Inputs must be positive integers: x = {}, y = {}\".format(x, y)\n    \n    # Ensure start is less than or equal to end\n    result = (x, y) if x <= y else (y, x)\n    \n    # Check output format and range order\n    assert isinstance(result, tuple), \"Output must be a tuple, got: {}\".format(type(result))\n    assert len(result) == 2, \"Output tuple must have exactly two elements, got: {}\".format(len(result))\n    assert result[0] <= result[1], \"First element must be <= second element in result: {}\".format(result)\n    \n    return result"}, {"function_name": "find_biggest_even", "code": "def find_biggest_even(start: int, end: int) -> int:\n    \"\"\"\n    Finds the biggest even integer in the range [start, end].\n    Returns -1 if no even number is found.\n    \"\"\"\n    assert isinstance(start, int), f\"Expected 'start' to be an integer but got {type(start).__name__}\"\n    assert isinstance(end, int), f\"Expected 'end' to be an integer but got {type(end).__name__}\"\n    assert start >= 0 and end >= 0, f\"Range boundaries must be non-negative, got start={start}, end={end}\"\n    assert start <= end, f\"Start value must be less than or equal to end value, got start={start}, end={end}\"\n\n    biggest_even = -1\n\n    # Check from the end of the range going backwards to find the biggest even number\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            biggest_even = num\n            break\n        assert num >= start, f\"Loop iteration with num={num} which is not >= start={start}\"\n\n    assert biggest_even == -1 or (biggest_even % 2 == 0 and start <= biggest_even <= end), \\\n        f\"The biggest even number {biggest_even} is invalid within range [{start}, {end}]\"\n\n    return biggest_even"}]}}