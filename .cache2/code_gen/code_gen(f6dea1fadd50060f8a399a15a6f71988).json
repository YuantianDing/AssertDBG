{"in": {"attempt": -1, "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "is_bored", "code": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def split_into_sentences(text: str) -> list:\n        assert isinstance(text, str), f\"Expected input text to be of type str, got {type(text)}\"\n        sentences = text.replace('!', '.').replace('?', '.').split('.')\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Every element in result should be of type str.\"\n        return sentences\n\n    def count_boredom_sentences(sentences: list) -> int:\n        assert isinstance(sentences, list), f\"Expected sentences to be list, got {type(sentences)}\"\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Expected all elements in sentences to be str type.\"\n        boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n        assert isinstance(boredom_count, int), f\"Expected boredom_count to be int, got {type(boredom_count)}\"\n        assert boredom_count >= 0, f\"Expected boredom_count to be non-negative, got {boredom_count}\"\n        return boredom_count\n\n    assert isinstance(S, str), f\"Input S should be a string, got {type(S)}\"\n    sentences = split_into_sentences(S)\n    boredom_count = count_boredom_sentences(sentences)\n    assert isinstance(boredom_count, int), f\"Output boredom_count should be an integer, got {type(boredom_count)}\"\n    assert boredom_count >= 0, f\"Output boredom_count should be non-negative, got {boredom_count}\"\n    return boredom_count\n"}, "subfunctions": [{"function_name": "split_into_sentences", "code": "import re\n\ndef split_into_sentences(text: str) -> list:\n    \"\"\"\n    Splits a given text into a list of sentences based on delimiters '.', '?' and '.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list containing individual sentences as elements.\n    \"\"\"\n    assert isinstance(text, str), f\"Expected input `text` to be of type `str`, but got {type(text).__name__}.\"\n\n    sentences = re.split(r'[.?!]\\s*', text)\n\n    assert sentences is not None, \"The result of splitting text should not be None.\"\n    assert isinstance(sentences, list), f\"Expected `sentences` to be a list after splitting, but got {type(sentences).__name__}.\"\n\n    sentences = [sentence for sentence in sentences if sentence]\n\n    assert all(isinstance(sentence, str) for sentence in sentences), \"Each element in the output must be a string.\"\n\n    return sentences\n"}, {"function_name": "count_boredom_sentences", "code": "def count_boredom_sentences(sentences: list) -> int:\n    \"\"\"\n    Counts the number of sentences that start with the word 'I'.\n\n    Args:\n    sentences (list): A list of sentences.\n\n    Returns:\n    int: The count of sentences starting with 'I'.\n    \"\"\"\n    # Ensure input is a list of strings\n    assert isinstance(sentences, list), f\"Input must be a list, got {type(sentences).__name__}.\"\n    assert all(isinstance(sentence, str) for sentence in sentences), \"All elements must be strings.\"\n    \n    # Count sentences starting with 'I'\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    \n    # Ensure output is an integer\n    assert isinstance(count, int), f\"Output must be an integer, got {type(count).__name__}.\"\n    # Ensure the output is within the range of possible valid values\n    assert 0 <= count <= len(sentences), f\"Count must be between 0 and {len(sentences)}, got {count}.\"\n    return count\n"}]}}