{"in": {"attempt": -1, "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "factorize", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    current_number = n\n    for prime in get_primes_up_to(n):\n        while current_number % prime == 0:\n            factors.append(prime)\n            current_number //= prime\n    if current_number != 1:  # if remaining number is a prime larger than sqrt(n)\n        factors.append(current_number)\n    return factors\n"}, "subfunctions": [{"function_name": "get_primes_up_to", "code": "from typing import List\n\ndef get_primes_up_to(n: int) -> List[int]:\n    \"\"\"Generate a list of prime numbers up to a given number n (inclusive).\"\"\"\n    if n < 2:\n        return []  # If n is less than 2, there's no prime number to return\n    \n    is_prime = [True] * (n + 1)  # Create a boolean array to track prime status\n    is_prime[0], is_prime[1] = False, False  # 0 and 1 are not prime numbers\n    \n    p = 2\n    while (p * p <= n):\n        if (is_prime[p] == True):\n            # Updating all multiples of p as not prime\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n        p += 1\n    \n    # Collect all prime numbers\n    primes = [p for p in range(2, n + 1) if is_prime[p]]\n    return primes"}]}}