{"in": {"attempt": -1, "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "right_angle_triangle", "code": "def right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    \n    def find_hypotenuse(a: float, b: float, c: float) -> float:\n        '''\n        Identify the hypotenuse, which is the side with the greatest length.\n        '''\n        assert a > 0 and b > 0 and c > 0, f\"All side lengths must be positive: a={a}, b={b}, c={c}\"\n        hypotenuse = max(a, b, c)\n        assert hypotenuse >= max(a, b, c), f\"Failed to determine the hypotenuse correctly: hypotenuse={hypotenuse}, sides=({a}, {b}, {c})\"\n        return hypotenuse\n    \n    def is_right_angle(a: float, b: float, c: float, hypotenuse: float) -> bool:\n        '''\n        Check if the triangle with given sides forms a right-angled triangle.\n        '''\n        squares = [a**2, b**2, c**2]\n        squares.remove(hypotenuse**2)\n        assert len(squares) == 2, f\"Failed to have exactly two sides after removing hypotenuse: squares={squares}\"\n        result = squares[0] + squares[1] == hypotenuse**2\n        assert isinstance(result, bool), f\"Result should be of type bool: result={result}\"\n        return result\n\n    # Assertions for input correctness\n    assert isinstance(a, float) and isinstance(b, float) and isinstance(c, float), \\\n        f\"All input sides must be of type float: a={a}, b={b}, c={c}\"\n    assert a > 0 and b > 0 and c > 0, f\"All side lengths must be positive: a={a}, b={b}, c={c}\"\n\n    hypotenuse = find_hypotenuse(a, b, c)\n    result = is_right_angle(a, b, c, hypotenuse)\n    \n    # Assertion for output correctness\n    assert isinstance(result, bool), f\"Output must be of type bool: result={result}\"\n    return result\n"}, "subfunctions": [{"function_name": "find_hypotenuse", "code": "def find_hypotenuse(a: float, b: float, c: float) -> float:\n    '''\n    Identify the hypotenuse (the longest side) of the triangle given its sides.\n    Returns the length of the hypotenuse.\n    '''\n    assert isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float)), \"All sides must be numbers. Got types: a: {}, b: {}, c: {}\".format(type(a), type(b), type(c))\n    assert a > 0 and b > 0 and c > 0, \"Sides must be positive. Got values: a: {}, b: {}, c: {}\".format(a, b, c)\n    hypotenuse = max(a, b, c)\n    assert hypotenuse >= a and hypotenuse >= b and hypotenuse >= c, \"Hypotenuse must be the longest side. Hypotenuse: {}, sides: ({}, {}, {})\".format(hypotenuse, a, b, c)\n    return hypotenuse\n"}, {"function_name": "is_right_angle", "code": "def is_right_angle(a: float, b: float, c: float, hypotenuse: float) -> bool:\n    '''\n    Check if the sides form a right-angled triangle using the Pythagorean theorem\n    by comparing the sum of the squares of the other two sides to the square of\n    the hypotenuse.\n    '''\n    assert isinstance(a, (int, float)) and a > 0, f\"Side 'a' must be a positive number, got {a}\"\n    assert isinstance(b, (int, float)) and b > 0, f\"Side 'b' must be a positive number, got {b}\"\n    assert isinstance(c, (int, float)) and c > 0, f\"Side 'c' must be a positive number, got {c}\"\n    assert isinstance(hypotenuse, (int, float)) and hypotenuse > 0, f\"Hypotenuse must be a positive number, got {hypotenuse}\"\n    assert hypotenuse in [a, b, c], f\"Hypotenuse {hypotenuse} must be one of the sides {a}, {b}, {c}\"\n    \n    sides = [a, b, c]\n    sides.remove(hypotenuse)\n    \n    assert len(sides) == 2, f\"There must be exactly two sides left after removing the hypotenuse, got {len(sides)}\"\n    \n    sum_of_squares = round(sides[0] ** 2 + sides[1] ** 2, 10)\n    hypotenuse_square = round(hypotenuse ** 2, 10)\n    assert sum_of_squares >= 0, f\"Sum of squares should be non-negative, got {sum_of_squares}\"\n    assert hypotenuse_square >= 0, f\"Hypotenuse squared should be non-negative, got {hypotenuse_square}\"\n\n    result = sum_of_squares == hypotenuse_square\n    assert isinstance(result, bool), f\"The result must be a boolean, got {type(result)}\"\n\n    return result\n"}]}}