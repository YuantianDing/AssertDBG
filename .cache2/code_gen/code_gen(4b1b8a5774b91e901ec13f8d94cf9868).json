{"in": {"attempt": -1, "prompt": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "max_fill", "code": "import math\n\ndef calculate_total_water_units(grid):\n    \"\"\"\n    Helper function to calculate the total number of water units.\n    \"\"\"\n    total_water_units = 0\n    for i, row in enumerate(grid):\n        for j, unit in enumerate(row):\n            assert unit in (0, 1), f\"Invalid water unit {unit} at grid[{i}][{j}], expected 0 or 1.\"\n            total_water_units += unit\n    assert total_water_units >= 0, \"Total water units should be non-negative.\"\n    return total_water_units\n\n\ndef calculate_bucket_uses(total_water_units, capacity):\n    \"\"\"\n    Helper function to calculate the bucket uses based on total water units and bucket capacity.\n    \"\"\"\n    assert capacity > 0, \"Bucket capacity must be greater than zero.\"\n    bucket_uses = math.ceil(total_water_units / capacity)\n    assert bucket_uses >= 0, \"Bucket uses should be non-negative.\"\n    return bucket_uses\n\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    assert isinstance(grid, list) and all(isinstance(row, list) for row in grid), \"Grid must be a list of lists.\"\n    assert isinstance(capacity, int), \"Capacity must be an integer.\"\n    assert 1 <= len(grid) <= 100, \"Grid length must be between 1 and 100.\"\n    assert len(grid[0]) <= 100, \"Grid row length must not exceed 100.\"\n    if len(grid) > 0:\n        row_length = len(grid[0])\n        for row in grid:\n            assert len(row) == row_length, \"All rows in grid must have the same length.\"\n\n    total_water_units = calculate_total_water_units(grid)\n    result = calculate_bucket_uses(total_water_units, capacity)\n    \n    assert isinstance(result, int) and result >= 0, \"Result must be a non-negative integer.\"\n    return result\n"}, "subfunctions": [{"function_name": "calculate_total_water_units", "code": "def calculate_total_water_units(grid: list[list[int]]) -> int:\n    \"\"\"\n    Calculate the total number of water units present in the grid.\n    Each 1 in the grid represents a single unit of water.\n\n    :param grid: A 2D list representing wells, where each 1 is a water unit.\n    :return: Total number of water units in the grid.\n    \"\"\"\n    # Check if the grid is a 2D list.\n    assert all(isinstance(row, list) for row in grid), \"Each element of 'grid' should be a list.\"\n    # Check if each element in the grid is an int and is either 0 or 1.\n    for row in grid:\n        assert all(isinstance(cell, int) and (cell == 0 or cell == 1) for cell in row), \\\n            \"Each cell in 'row' should be an integer and must be either 0 or 1.\"\n    \n    total_water_units = 0\n    # Iterate through each row and column in the grid to count water units.\n    for idx, row in enumerate(grid):\n        row_sum = sum(row)\n        # Check if row_sum is non-negative.\n        assert row_sum >= 0, f\"Row sum for row index {idx} should be non-negative, got {row_sum}.\"\n        total_water_units += row_sum\n    \n    # Final assertion to check if the total water units are non-negative.\n    assert total_water_units >= 0, f\"Total water units should be non-negative, got {total_water_units}.\"\n    \n    return total_water_units"}, {"function_name": "calculate_bucket_uses", "code": "def calculate_bucket_uses(total_water_units: int, capacity: int) -> int:\n    \"\"\"\n    Calculate the number of times buckets need to be lowered based on total\n    water units and bucket capacity.\n\n    :param total_water_units: The total number of water units in the grid.\n    :param capacity: The capacity of each bucket.\n    :return: The number of times buckets need to be lowered.\n    \"\"\"\n    assert isinstance(total_water_units, int), f\"Total water units must be an integer, got {type(total_water_units)}.\"\n    assert isinstance(capacity, int), f\"Bucket capacity must be an integer, got {type(capacity)}.\"\n    assert total_water_units >= 0, \"Total number of water units must be non-negative.\"\n    assert 1 <= capacity <= 10, \"Bucket capacity must be between 1 and 10.\"\n\n    result = (total_water_units + capacity - 1) // capacity\n\n    assert isinstance(result, int), f\"Result must be an integer, got {type(result)}.\"\n    assert result >= 0, f\"Result must be non-negative, got {result}.\"\n\n    return result\n"}]}}