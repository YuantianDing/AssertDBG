{"in": {"attempt": -1, "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "right_angle_triangle", "code": "def right_angle_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    sides = [a, b, c]\n    hypotenuse = get_hypotenuse(sides)\n    sides.remove(hypotenuse)\n    \n    return is_right_triangle(sides[0], sides[1], hypotenuse)\n"}, "subfunctions": [{"function_name": "get_hypotenuse", "code": "def get_hypotenuse(sides: list) -> float:\n    '''\n    Given a list of three side lengths, return the largest one which is usually considered\n    the hypotenuse for the purpose of checking a right triangle.\n    '''\n    \n    # Simply return the maximum value of the list, which represents the hypotenuse\n    return max(sides)\n"}, {"function_name": "is_right_triangle", "code": "def is_right_triangle(a: float, b: float, c: float) -> bool:\n    '''\n    Determines if a triangle with sides a, b, and c is right-angled.\n    Uses the Pythagorean theorem: a^2 + b^2 = c^2\n    where c is the hypotenuse.\n    '''\n    \n    # Sort the sides to ensure c is the largest, and hence the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Apply the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}]}}