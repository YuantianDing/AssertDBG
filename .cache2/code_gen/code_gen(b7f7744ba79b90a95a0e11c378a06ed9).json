{"in": {"attempt": -1, "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "words_string", "code": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    def split_string_to_words(input_str):\n        assert isinstance(input_str, str), f\"Expected input to be a string, got {type(input_str).__name__}\"\n        words = [word.strip() for word in re.split(r'[ ,]+', input_str) if word.strip()]\n        assert all(word for word in words), \"Each element in the resulting list should be non-empty\"\n        return words\n\n    assert isinstance(s, str), f\"Expected input to be a string, got {type(s).__name__}\"\n    import re\n    result = split_string_to_words(s)\n    assert isinstance(result, list), f\"Expected output to be a list, got {type(result).__name__}\"\n    assert all(isinstance(word, str) for word in result), \"All elements in the output list should be strings\"\n    return result\n"}, "subfunctions": [{"function_name": "split_string_to_words", "code": "import re\n\ndef split_string_to_words(s: str) -> list:\n    \"\"\"\n    Splits a string into words using commas or spaces as delimiters.\n    \n    Args:\n        s (str): The input string to be split.\n\n    Returns:\n        list: A list containing the split words.\n    \n    \"\"\"\n    assert isinstance(s, str), f\"Input must be a string, but got {type(s).__name__}\"\n    result = [word for word in re.split(r'[\\s,]+', s) if word]\n    assert all(isinstance(word, str) and word for word in result), f\"Output must be a list of non-empty strings, but got {result}\"\n    return result\n"}]}}