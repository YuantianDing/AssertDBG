{"in": {"attempt": -1, "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "order_by_points", "code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}, "subfunctions": [{"function_name": "sum_of_digits", "code": "def sum_of_digits(num: int) -> int:\n    \"\"\"\n    Calculate the sum of the absolute digits of the given integer.\n\n    Args:\n    num (int): The integer whose digits are to be summed.\n\n    Returns:\n    int: The sum of the absolute digits of the integer.\n    \"\"\"\n    # Convert to absolute to handle negative numbers and sum the digits using list comprehension.\n    return sum(int(digit) for digit in str(abs(num))) # Convert number to string to iterate over digits and sum them.\n"}]}}