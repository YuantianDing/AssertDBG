{"in": {"attempt": -1, "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "check_dict_case", "code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    def is_empty_dict(d):\n        empty = len(d) == 0\n        assert isinstance(d, dict), f\"Expected a dictionary, got {type(d)} with value {d}\"\n        assert isinstance(empty, bool), f\"Expected a boolean, got {type(empty)} with value {empty}\"\n        return empty\n\n    def get_string_keys(d):\n        string_keys = [k for k in d.keys() if isinstance(k, str)]\n        assert all(isinstance(k, str) for k in string_keys), \"All elements in string_keys should be strings.\"\n        return string_keys\n\n    def all_keys_same_case(keys):\n        # Check if all keys are lowercased or uppercased\n        all_lower = all(k.islower() for k in keys)\n        all_upper = all(k.isupper() for k in keys)\n        result = all_lower or all_upper\n        assert isinstance(result, bool), f\"Expected a boolean result, got {type(result)} with value {result}\"\n        assert isinstance(all_lower, bool) and isinstance(all_upper, bool), f\"Unexpected types: all_lower = {type(all_lower)}, all_upper = {type(all_upper)}\"\n        return result\n\n    # Check for empty dictionary\n    if is_empty_dict(dict):\n        assert not is_empty_dict(dict), \"Dictionary should not be empty\"\n        return False\n    \n    # Filter keys that are strings\n    string_keys = get_string_keys(dict)\n    \n    # Check if all string keys are lower case or all are upper case\n    result = all_keys_same_case(string_keys)\n    assert isinstance(result, bool), f\"Expected output type to be bool, got {type(result)} with value {result}\"\n    return result\n"}, "subfunctions": [{"function_name": "is_empty_dict", "code": "def is_empty_dict(d: dict) -> bool:\n    \"\"\"\n    Check if the provided dictionary is empty.\n    \n    Args:\n        d (dict): The dictionary to check.\n        \n    Returns:\n        bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    # Input assertion\n    assert isinstance(d, dict), f'Input must be of type dict, got {type(d)}'\n    \n    result = len(d) == 0\n    \n    # Output assertion\n    assert isinstance(result, bool), f'Expected boolean result, got {type(result)}'\n    # Validate logic: result should be True if and only if d is empty\n    assert result == (not d), f'Logical assertion failed: result is {result}, dictionary is {d}'\n    \n    return result\n"}, {"function_name": "get_string_keys", "code": "def get_string_keys(d: dict) -> list:\n    \"\"\"\n    Extract all string keys from the given dictionary.\n    \n    Args:\n        d (dict): The dictionary from which to extract string keys.\n        \n    Returns:\n        list: A list containing all keys from the dictionary that are strings.\n    \"\"\"\n    # Input assertion\n    assert isinstance(d, dict), 'Input must be of type dict'\n    \n    # Extract the keys that are strings\n    string_keys = [key for key in d.keys() if isinstance(key, str)]\n    \n    # Output assertion\n    assert all(isinstance(key, str) for key in string_keys), (\n        'All elements in the output list must be of type str. Output contained: {}'.format(string_keys)\n    )\n    \n    return string_keys\n"}, {"function_name": "all_keys_same_case", "code": "def all_keys_same_case(keys: list) -> bool:\n    \"\"\"\n    Determine if all the keys in the list are either all lowercase or all uppercase.\n    \n    Args:\n        keys (list): A list of string keys.\n        \n    Returns:\n        bool: True if all keys are in the same case, False otherwise.\n    \"\"\"\n    # Input assertion\n    assert isinstance(keys, list), f'Expected keys to be a list, got {type(keys).__name__} instead'\n    assert all(isinstance(key, str) for key in keys), 'All keys must be strings'\n\n    if not keys:  # If the list is empty, return False\n        return False\n\n    # Check if all keys are lowercase\n    all_lower = all(key.islower() for key in keys)\n    # Assert intermediate state\n    assert isinstance(all_lower, bool), f'Expected all_lower to be bool, got {type(all_lower).__name__}'\n\n    # Check if all keys are uppercase\n    all_upper = all(key.isupper() for key in keys)\n    # Assert intermediate state\n    assert isinstance(all_upper, bool), f'Expected all_upper to be bool, got {type(all_upper).__name__}'\n\n    # Output assertion\n    result = all_lower or all_upper\n    assert isinstance(result, bool), f'Expected result to be bool, got {type(result).__name__}'\n    return result\n"}]}}