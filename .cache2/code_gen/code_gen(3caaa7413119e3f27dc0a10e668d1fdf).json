{"in": {"attempt": -1, "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "with_assert": true, "verbose": 2}, "out": {"main_func": {"function_name": "numerical_letter_grade", "code": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    assert isinstance(grades, list), f\"Expected grades to be a list, but got {type(grades)}.\"\n    assert all(isinstance(gpa, (int, float)) for gpa in grades), \"All elements in grades must be integers or floats.\"\n    assert all(0.0 <= gpa <= 4.0 for gpa in grades), \"GPA values should be between 0.0 and 4.0 inclusive.\"\n\n    letter_grades = [map_gpa_to_letter(gpa) for gpa in grades]\n\n    valid_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    assert all(letter in valid_grades for letter in letter_grades), \"Invalid letter grade found in results.\"\n\n    return letter_grades\n\ndef map_gpa_to_letter(gpa):\n    assert isinstance(gpa, (int, float)), f\"Expected gpa to be an int or float, but got {type(gpa)}.\"\n    assert 0.0 <= gpa <= 4.0, f\"GPA should be between 0.0 and 4.0 inclusive, but got {gpa}.\"\n\n    if gpa == 4.0:\n        return 'A+'\n    elif gpa > 3.7:\n        return 'A'\n    elif gpa > 3.3:\n        return 'A-'\n    elif gpa > 3.0:\n        return 'B+'\n    elif gpa > 2.7:\n        return 'B'\n    elif gpa > 2.3:\n        return 'B-'\n    elif gpa > 2.0:\n        return 'C+'\n    elif gpa > 1.7:\n        return 'C'\n    elif gpa > 1.3:\n        return 'C-'\n    elif gpa > 1.0:\n        return 'D+'\n    elif gpa > 0.7:\n        return 'D'\n    elif gpa > 0.0:\n        return 'D-'\n    else:\n        return 'E'"}, "subfunctions": [{"function_name": "map_gpa_to_letter", "code": "def map_gpa_to_letter(gpa: float) -> str:\n    \"\"\"\n    Map a GPA to its corresponding letter grade based on the specified grading scale.\n\n    Args:\n    - gpa: A float representing the GPA of a student.\n\n    Returns:\n    - A string representing the letter grade corresponding to the given GPA.\n    \"\"\"\n    assert isinstance(gpa, float), f\"Input must be a float representing the GPA, got {type(gpa)}.\"\n    assert 0.0 <= gpa <= 4.0, f\"GPA must be between 0.0 and 4.0 inclusive, got {gpa}.\"\n\n    if gpa == 4.0:\n        grade = 'A+'\n    elif gpa > 3.7:\n        grade = 'A'\n    elif gpa > 3.3:\n        grade = 'A-'\n    elif gpa > 3.0:\n        grade = 'B+'\n    elif gpa > 2.7:\n        grade = 'B'\n    elif gpa > 2.3:\n        grade = 'B-'\n    elif gpa > 2.0:\n        grade = 'C+'\n    elif gpa > 1.7:\n        grade = 'C'\n    elif gpa > 1.3:\n        grade = 'C-'\n    elif gpa > 1.0:\n        grade = 'D+'\n    elif gpa > 0.7:\n        grade = 'D'\n    elif gpa > 0.0:\n        grade = 'D-'\n    else:\n        grade = 'E'\n    \n    assert grade in ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'], \\\n        f\"Output grade is invalid: {grade}.\"\n    return grade\n"}]}}