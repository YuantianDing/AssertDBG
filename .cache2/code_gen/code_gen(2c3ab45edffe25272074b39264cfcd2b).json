{"in": {"attempt": -1, "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "encode", "code": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    swapped_case_message = swap_case(message)\n    encoded_message = replace_vowels(swapped_case_message)\n    return encoded_message\n"}, "subfunctions": [{"function_name": "swap_case", "code": "def swap_case(message: str) -> str:\n    \"\"\"\n    Swap the case of all letters in the message.\n    \n    Args:\n        message (str): The original message with only letters.\n    \n    Returns:\n        str: A new message with each letter's case swapped.\n    \n    Example:\n        'AbC' -> 'aBc'\n    \"\"\"\n    # Iterate over each character in the message string, swapping its case\n    return message.swapcase()"}, {"function_name": "replace_vowels", "code": "def replace_vowels(message: str) -> str:\n    \"\"\"\n    Replace all vowels in the message with the letter that appears \n    two places ahead in the alphabet.\n    \n    Args:\n        message (str): The message with swapped cases.\n    \n    Returns:\n        str: A new message with vowels replaced as specified.\n    \n    Example:\n        'tEst' -> 'tGst'\n    \"\"\"\n    # Define a mapping from each vowel to the letter 2 places ahead\n    vowel_map = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U': 'W'\n    }\n    # Replace each vowel in the message using the map\n    return ''.join(vowel_map.get(char, char) for char in message)\n"}]}}