{"in": {"attempt": -1, "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "with_assert": false, "verbose": 2}, "out": {"main_func": {"function_name": "modp", "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return calculate_power_modulo(2, n, p)"}, "subfunctions": [{"function_name": "calculate_power_modulo", "code": "def calculate_power_modulo(base: int, exponent: int, modulus: int) -> int:\n    \"\"\"\n    Calculate (base^exponent) % modulus efficiently using the method of exponentiation by squaring.\n\n    :param base: The base number.\n    :param exponent: The exponent to raise the base.\n    :param modulus: The modulus to take after exponentiation.\n    :return: The result of (base^exponent) % modulus.\n\n    :raises ValueError: If the modulus is less than or equal to 0.\n\n    :assumption: `modulus` is a positive number.\n    \"\"\"\n    if modulus <= 0:\n        raise ValueError(\"Modulus must be a positive integer.\")\n    \n    result = 1\n    base = base % modulus  # Reduce base if it's greater than the modulus\n    \n    while exponent > 0:\n        # If exponent is odd, multiply the result with the base\n        if (exponent % 2) == 1:\n            result = (result * base) % modulus\n        \n        # Exponent must be even now\n        exponent = exponent >> 1  # Divide exponent by 2\n        base = (base * base) % modulus  # Square the base\n\n    return result"}]}}