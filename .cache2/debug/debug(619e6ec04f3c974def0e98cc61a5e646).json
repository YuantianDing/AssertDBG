{"in": {"code": {"main_func": {"function_name": "is_bored", "code": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def split_into_sentences(text: str) -> list:\n        assert isinstance(text, str), f\"Expected input text to be of type str, got {type(text)}\"\n        sentences = []\n        sentence = ''\n        for char in text:\n            sentence += char\n            if char in '.!?':\n                if sentence:\n                    sentences.append(sentence.strip())\n                sentence = ''\n        if sentence:\n            sentences.append(sentence.strip())\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Every element in result should be of type str.\"\n        return sentences\n\n    def count_boredom_sentences(sentences: list) -> int:\n        assert isinstance(sentences, list), f\"Expected sentences to be list, got {type(sentences)}\"\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Expected all elements in sentences to be str type.\"\n        boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n        assert isinstance(boredom_count, int), f\"Expected boredom_count to be int, got {type(boredom_count)}\"\n        assert boredom_count >= 0, f\"Expected boredom_count to be non-negative, got {boredom_count}\"\n        return boredom_count\n\n    assert isinstance(S, str), f\"Input S should be a string, got {type(S)}\"\n    sentences = split_into_sentences(S)\n    boredom_count = count_boredom_sentences(sentences)\n    assert isinstance(boredom_count, int), f\"Output boredom_count should be an integer, got {type(boredom_count)}\"\n    assert boredom_count >= 0, f\"Output boredom_count should be non-negative, got {boredom_count}\"\n    return boredom_count\n"}, "subfunctions": [{"function_name": "split_into_sentences", "code": "def split_into_sentences(text: str) -> list:\n    assert isinstance(text, str), f\"Expected input text to be of type str, got {type(text)}\"\n    sentences = []\n    sentence = ''\n    for char in text:\n        sentence += char\n        if char in '.!?':\n            if sentence.strip():  # Ensure non-empty sentence\n                sentences.append(sentence.strip())\n            sentence = ''\n    if sentence.strip():  # Check for the last sentence without ending punctuation\n        sentences.append(sentence.strip())\n    assert all(isinstance(sentence, str) for sentence in sentences), \"Every element in result should be of type str.\"\n    return sentences"}, {"function_name": "count_boredom_sentences", "code": "def count_boredom_sentences(sentences: list) -> int:\n    \"\"\"\n    Counts the number of sentences that start with the word 'I'.\n\n    Args:\n    sentences (list): A list of sentences.\n\n    Returns:\n    int: The count of sentences starting with 'I'.\n    \"\"\"\n    # Ensure input is a list of strings\n    assert isinstance(sentences, list), f\"Input must be a list, got {type(sentences).__name__}.\"\n    assert all(isinstance(sentence, str) for sentence in sentences), \"All elements must be strings.\"\n    \n    # Count sentences starting with 'I'\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    \n    # Ensure output is an integer\n    assert isinstance(count, int), f\"Output must be an integer, got {type(count).__name__}.\"\n    # Ensure the output is within the range of possible valid values\n    assert 0 <= count <= len(sentences), f\"Count must be between 0 and {len(sentences)}, got {count}.\"\n    return count\n"}]}, "test": {"function_name": "test_is_bored", "code": "import random\nimport string\n\ndef test_is_bored():\n    def random_sentence(start_with_i=False):\n        sentence = \"I \" if start_with_i else \"\"\n        sentence += ''.join(random.choices(string.ascii_letters + ' ', k=random.randint(5, 15)))\n        sentence = sentence.strip().capitalize()\n        sentence += random.choice(['.', '?', '!'])\n        return sentence\n\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        num_sentences = random.randint(1, 20)\n        sentences = [random_sentence(random.choice([True, False])) for _ in range(num_sentences)]\n        text = ' '.join(sentences)\n        # Calculate expected boredom count\n        expected_count = sum(1 for sentence in sentences if sentence.startswith('I '))\n        assert is_bored(text) == expected_count, f\"Failed for random test case: {text}\"\n\n    # Edge cases: Empty string\n    assert is_bored('') == 0, \"Failed for empty string\"\n\n    # Edge case: Only punctuation\n    assert is_bored('.') == 0, \"Failed for lone period\"\n    assert is_bored('?!') == 0, \"Failed for question mark and exclamation point\"\n\n    # Test input with sentences starting and not starting with 'I'\n    assert is_bored('I am here.') == 1, \"Failed for single sentence starting with I\"\n    assert is_bored('You are here.') == 0, \"Failed for single sentence not starting with I\"\n\n    # Test multiple sentences\n    assert is_bored('I am here. You are there. I will go.') == 2, \"Failed for multiple sentences with mixed start\"\n\n    # Sentences starting with 'I' in none initial capital letter\n    assert is_bored('i am invisible. i am not counted.') == 0, \"Failed for lowercase i at start of sentences\"\n    assert is_bored('I am visible. i am not counted.') == 1, \"Failed for mixed capitalization\"\n\n    # Long text with intermittent \"I\"\n    text = \"This is a test. This is only a test. I need to get lunch.\"\n    assert is_bored(text) == 1, \"Failed for a long text with intermittent 'I'\"\n\n    # Sentences with different endings\n    sentence1 = \"I absolutely love coding!\"\n    sentence2 = \"I find this challenging.\"\n    sentence3 = \"Do you agree?\"\n    assert is_bored(f'{sentence1} {sentence2} {sentence3}') == 2, \"Failed for sentences with different endings\""}, "error": "Traceback (most recent call last):\n  File \"/tmp/assertdbg.py\", line 148, in <module>\n    test_is_bored()\n  File \"/tmp/assertdbg.py\", line 119, in test_is_bored\n    assert is_bored(text) == expected_count, f\"Failed for random test case: {text}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: Failed for random test case: Isklwyzqgc! Sqljwmcjy.\n", "verbose": 2}, "out": {"inner": {"action": "fix_code", "functions": [{"function_name": "is_bored", "code": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def split_into_sentences(text: str) -> list:\n        assert isinstance(text, str), f\"Expected input text to be of type str, got {type(text)}\"\n        import re\n        # Use regex to split sentences accurately considering punctuation\n        sentences = re.split(r'(?:\\s*[.!?]\\s*)', text)\n        sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Every element in result should be of type str.\"\n        return sentences\n\n    def count_boredom_sentences(sentences: list) -> int:\n        assert isinstance(sentences, list), f\"Expected sentences to be list, got {type(sentences)}\"\n        assert all(isinstance(sentence, str) for sentence in sentences), \"Expected all elements in sentences to be str type.\"\n        boredom_count = sum(1 for sentence in sentences if sentence.startswith('I '))\n        assert isinstance(boredom_count, int), f\"Expected boredom_count to be int, got {type(boredom_count)}\"\n        assert boredom_count >= 0, f\"Expected boredom_count to be non-negative, got {boredom_count}\"\n        return boredom_count\n\n    assert isinstance(S, str), f\"Input S should be a string, got {type(S)}\"\n    sentences = split_into_sentences(S)\n    boredom_count = count_boredom_sentences(sentences)\n    assert isinstance(boredom_count, int), f\"Output boredom_count should be an integer, got {type(boredom_count)}\"\n    assert boredom_count >= 0, f\"Output boredom_count should be non-negative, got {boredom_count}\"\n    return boredom_count\n"}]}}}