{"in": {"code": {"main_func": {"function_name": "split_words", "code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    assert isinstance(txt, str), f\"Input must be a string, got {type(txt)} instead.\"\n\n    if contains_whitespace(txt):\n        result = split_on_whitespace(txt)\n        assert isinstance(result, list) and all(isinstance(i, str) for i in result), \\\n            f\"Expected output to be a list of strings, got {result} instead.\"\n        return result\n    elif contains_comma(txt):\n        result = split_on_comma(txt)\n        assert isinstance(result, list) and all(isinstance(i, str) for i in result), \\\n            f\"Expected output to be a list of strings, got {result} instead.\"\n        return result\n    else:\n        result = count_odd_order_lowercase(txt)\n        assert isinstance(result, int) and result >= 0, \\\n            f\"Expected output to be a non-negative integer, got {result} instead.\"\n        return result\n\ndef contains_whitespace(txt):\n    return any(c.isspace() for c in txt)\n\ndef split_on_whitespace(txt):\n    result = txt.split()\n    return result\n\ndef contains_comma(txt):\n    return ',' in txt\n\ndef split_on_comma(txt):\n    result = [part.strip() for part in txt.split(',')]\n    return result\n\ndef count_odd_order_lowercase(txt):\n    count = sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n    return count\n"}, "subfunctions": [{"function_name": "contains_whitespace", "code": "def contains_whitespace(txt: str) -> bool:\n    '''\n    Check if the given string contains any whitespace characters.\n    '''\n    assert isinstance(txt, str), f'Input must be a string, got {type(txt)}'\n    \n    for char in txt:\n        assert isinstance(char, str) and len(char) == 1, f'Each character checked must be a string of length 1, got {repr(char)}'\n        # If a whitespace character is found, return True\n        if char.isspace():\n            return True\n    \n    # Once the loop is done, assert that the function is going to return False\n    # because no whitespace character was found.\n    assert all(not c.isspace() for c in txt), 'Function logic indicates no whitespace should be present.'\n    return False"}, {"function_name": "split_on_whitespace", "code": "def split_on_whitespace(txt: str) -> list:\n    '''\n    Split the given string based on whitespace and return the resulting list.\n    '''\n    assert isinstance(txt, str), f'Input must be a string, but got {type(txt).__name__}'\n    \n    # Use the built-in Python split function, which splits on whitespace by default.\n    result = txt.split()\n    \n    assert isinstance(result, list), f'Output must be a list, but got {type(result).__name__}'\n    assert all(isinstance(item, str) for item in result), 'All elements in the output list must be strings'\n    assert ''.join(result) == txt.replace(' ', ''), 'Output list items concatenated should match input without spaces'\n    \n    return result\n"}, {"function_name": "contains_comma", "code": "def contains_comma(txt: str) -> bool:\n    '''\n    Check if the given string contains any comma characters.\n    '''\n    assert isinstance(txt, str), f'Input must be a string, got {type(txt).__name__}'\n    result = ',' in txt\n    assert isinstance(result, bool), f'Result must be a boolean, got {type(result).__name__}'\n    return result\n"}, {"function_name": "split_on_comma", "code": "def split_on_comma(txt: str) -> list:\n    '''\n    Split the given string based on comma and return the resulting list.\n    ''\n    assert isinstance(txt, str), f'Input must be a string, got {type(txt)}'\n    result = txt.split(',')\n    assert isinstance(result, list), f'Output must be a list, got {type(result)}'\n    for elem in result:\n        assert isinstance(elem, str), f'Each element in output must be a string, got {type(elem)} in {result}'\n    return result\n"}, {"function_name": "count_odd_order_lowercase", "code": "def count_odd_order_lowercase(txt: str) -> int:\n    '''\n    Count and return the number of lowercase letters in the string with an odd order number in the alphabet.\n    '''\n    assert isinstance(txt, str), 'Input must be a string'\n    \n    # Initialize count for odd-order lowercase letters\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in txt:\n        \n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            \n            # Calculate its order (0 indexed)\n            order = ord(char) - ord('a')\n            \n            # Check if the calculated order is correct\n            assert 0 <= order <= 25, f'Order calculation is incorrect for char {char}, got order {order}'\n\n            # Check if the order is odd\n            if order % 2 == 1:\n                count += 1\n    \n    # Ensure the count is a non-negative integer\n    assert isinstance(count, int) and count >= 0, f'Output count is not valid, got {count}'\n    \n    return count\n\n"}]}, "test": {"function_name": "test_split_words_function", "code": "def test_split_words_function():\n    import string\n    import random\n    \n    # Random Test Cases\n    letters = string.ascii_letters\n    whitespace_example = \"    \".join(random.choice(letters) for _ in range(10))  # Ensure spaces\n    comma_example = \",\".join(random.choice(letters) for _ in range(10))  # Ensure commas without spaces\n    \n    for _ in range(1000):\n        assert isinstance(split_words(whitespace_example), list), \"Should return a list when whitespace is present.\"\n        assert isinstance(split_words(comma_example), list), \"Should return a list when commas are present.\"\n        \n    # Specific Edge and Expected Cases\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"], \"Whitespace splitting failed.\"\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"], \"Comma splitting failed.\"\n    assert split_words(\"abcdef\") == 3, \"Count of odd lower-case character positions failed.\"\n    assert split_words(\"\") == 0, \"Empty string should return 0.\"\n    \n    all_commas = \",,,,,\"\n    assert split_words(all_commas) == all_commas.split(\",\"), \"Continuous commas should split into empty strings.\"\n    \n    no_special_chars = \"bcdefg\"\n    # In 'bcdefg', 'b', 'd', 'f' are odd positioned\n    assert split_words(no_special_chars) == 3, \"Incorrect odd position count calculation.\"\n    \n    # Random strings of letters to test odd-position calculation\n    for _ in range(1000):\n        random_str = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 50)))\n        expected_count = sum([(ord(char) - ord('a')) % 2 == 1 for char in random_str])\n        assert split_words(random_str) == expected_count, f\"Failed odd count: {random_str}\""}, "error": "  File \"/tmp/assertdbg.py\", line 122\n    '''\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 182)\n", "verbose": 2}, "out": {"inner": {"action": "request_rework"}}}