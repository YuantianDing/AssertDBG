{"in": {"code": {"main_func": {"function_name": "order_by_points", "code": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    Note: If there are several items with the same sum of digits,\n    they should retain their original relative order.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))\n"}, "subfunctions": [{"function_name": "sum_of_digits", "code": "def sum_of_digits(num: int) -> int:\n    \"\"\"\n    Calculate the sum of the absolute digits of the given integer.\n\n    Args:\n    num (int): The integer whose digits are to be summed.\n\n    Returns:\n    int: The sum of the absolute digits of the integer.\n    \"\"\"\n    # Convert to absolute to handle negative numbers and sum the digits using list comprehension.\n    return sum(int(digit) for digit in str(abs(num))) # Convert number to string to iterate over digits and sum them.\n"}]}, "test": {"function_name": "test_order_by_points", "code": "import random\n\ndef test_order_by_points():\n    # Helper function to calculate the sum of digits\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        length = random.randint(0, 100)  # list length between 0 and 100\n        nums = [random.randint(-1000, 1000) for _ in range(length)]\n        expected = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n        assert order_by_points(nums) == expected\n\n    # Edge case: Empty list\n    assert order_by_points([]) == []\n\n    # Edge case: All elements have the same digit sum\n    nums = [111, 222, 333, 444]\n    assert order_by_points(nums) == nums\n\n    # Case: Mixed positive and negative numbers\n    nums = [1, 11, -1, -11, -12]\n    assert order_by_points(nums) == [-1, -11, 1, -12, 11]\n\n    # Case: All negative numbers\n    nums = [-10, -20, -30, -4]\n    expected = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n    assert order_by_points(nums) == expected\n\n    # Case: All positive numbers\n    nums = [23, 32]\n    expected = [23, 32]\n    assert order_by_points(nums) == expected\n\n    # Case: Repeated numbers\n    nums = [5, 5, 5, 5]\n    assert order_by_points(nums) == nums\n\n    # Case: Zero in the list\n    nums = [0, 20, 100, -100]\n    expected = [0, 100, -100, 20]\n    assert order_by_points(nums) == expected\n"}, "error": "Traceback (most recent call last):\n  File \"/tmp/assertdbg.py\", line 91, in <module>\n    test_order_by_points()\n  File \"/tmp/assertdbg.py\", line 59, in test_order_by_points\n    assert order_by_points(nums) == expected\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n", "verbose": 2}, "out": {"inner": {"action": "fix_code", "functions": [{"function_name": "order_by_points", "code": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    Note: If there are several items with the same sum of digits,\n    they should retain their original relative order.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n"}]}}}