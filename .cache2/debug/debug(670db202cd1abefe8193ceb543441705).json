{"in": {"code": {"main_func": {"function_name": "fib", "code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    assert isinstance(n, int), f\"Expected n to be an integer, got {type(n).__name__} instead.\"\n    assert n >= 1, f\"Expected n to be a positive integer greater than or equal to 1, got {n}.\"\n    result = calculate_fibonacci(n)\n    assert isinstance(result, int), f\"Expected result to be an integer, got {type(result).__name__} instead.\"\n    return result\n\ndef calculate_fibonacci(n: int) -> int:\n    assert isinstance(n, int), f\"Expected n to be an integer in calculate_fibonacci, got {type(n).__name__} instead.\"\n    assert n >= 1, f\"Expected n to be a positive integer in calculate_fibonacci, got {n}.\"\n    if n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(3, n + 1):\n        a, b = b, a + b\n        # Loop invariant: a and b should always be integers and less than the n-th Fibonacci number\n        assert isinstance(a, int) and isinstance(b, int), f\"Loop variables a and b should be integers, but got {type(a).__name__} and {type(b).__name__}.\"\n        assert a <= b, f\"Invariant violated: at iteration {i}, a should be less than or equal to b, but got a={a}, b={b}.\"\n    return b\n"}, "subfunctions": [{"function_name": "calculate_fibonacci", "code": "def calculate_fibonacci(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n    \"\"\"\n    assert isinstance(n, int), f\"n must be an integer, got {type(n).__name__} instead.\"\n    assert n > 0, f\"n must be a positive integer, got {n}.\"\n    \n    # Base cases for the first and second Fibonacci numbers\n    if n <= 2:\n        result = 1\n        assert result == 1, f\"For n <= 2, the Fibonacci number should be 1, got {result}.\"\n        return result\n    \n    # Starting values for the first two Fibonacci numbers\n    a, b = 1, 1\n    \n    # Iteratively compute the Fibonacci numbers up to n\n    for i in range(2, n):\n        a, b = b, a + b\n        assert b == a + b - a, f\"Incorrect calculation detected in loop at iteration {i}. a: {a}, b: {b}\"\n    \n    # Return the n-th Fibonacci number\n    result = b\n    assert result == calculate_fib_formula(n), f\"The calculated Fibonacci number {result} did not match the expected value.\"\n    return result\n\ndef calculate_fib_formula(n: int) -> int:\n    \"\"\"\n    Helper function to calculate the n-th Fibonacci number using Binet's formula for verification.\n    Note: This function assumes n > 0.\n    \"\"\"\n    assert isinstance(n, int) and n > 0, \"n must be a positive integer in this helper function.\"\n    \n    phi = (1 + 5 ** 0.5) / 2\n    return int(round((phi ** n - (-1 / phi) ** n) / 5 ** 0.5))\n"}]}, "test": {"function_name": "test_fib_function", "code": "import random\n\ndef test_fib_function():\n    \"\"\"Test function for the fibonacci calculation function.\"\"\"\n    # Generate random test cases\n    for _ in range(1000):\n        # Random small number to stay within reasonable limits\n        n = random.randint(0, 25)\n        expected = fib_cache[n]\n        assert fib(n) == expected, f\"Failed for random n={n}, expected {expected}, got {fib(n)}\"\n\n    # Edge cases\n    assert fib(0) == 0, \"Failed for n=0, expected 0\"\n    assert fib(1) == 1, \"Failed for n=1, expected 1\"\n\n    # Known values\n    assert fib(5) == 5, \"Failed for n=5, expected 5\"\n    assert fib(10) == 55, \"Failed for n=10, expected 55\"\n\n    # Check some values above cached ones to potentially fail (to check for definition completeness)\n    try:\n        result = fib(30)\n        print(f\"fib(30) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")\n\n    try:\n        result = fib(50)\n        print(f\"fib(50) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")"}, "error": "Traceback (most recent call last):\n  File \"/tmp/assertdbg.py\", line 114, in <module>\n    test_fib_function()\n  File \"/tmp/assertdbg.py\", line 91, in test_fib_function\n    expected = fib_cache[n]\n               ^^^^^^^^^\nNameError: name 'fib_cache' is not defined\n", "verbose": 2}, "out": {"inner": {"action": "fix_code", "functions": [{"function_name": "test_fib_function", "code": "import random\n\ndef test_fib_function():\n    \"\"\"Test function for the fibonacci calculation function.\"\"\"\n    # Define the cache for known Fibonacci numbers\n    fib_cache = {\n        0: 0,\n        1: 1,\n        2: 1,\n        3: 2,\n        4: 3,\n        5: 5,\n        6: 8,\n        7: 13,\n        8: 21,\n        9: 34,\n        10: 55,\n        11: 89,\n        12: 144,\n        13: 233,\n        14: 377,\n        15: 610,\n        16: 987,\n        17: 1597,\n        18: 2584,\n        19: 4181,\n        20: 6765,\n        21: 10946,\n        22: 17711,\n        23: 28657,\n        24: 46368,\n        25: 75025\n    }\n    # Generate random test cases\n    for _ in range(1000):\n        # Random small number to stay within reasonable limits\n        n = random.randint(0, 25)\n        expected = fib_cache[n]\n        assert fib(n) == expected, f\"Failed for random n={n}, expected {expected}, got {fib(n)}\"\n\n    # Edge cases\n    assert fib(0) == 0, \"Failed for n=0, expected 0\"\n    assert fib(1) == 1, \"Failed for n=1, expected 1\"\n\n    # Known values\n    assert fib(5) == 5, \"Failed for n=5, expected 5\"\n    assert fib(10) == 55, \"Failed for n=10, expected 55\"\n\n    # Check some values above cached ones to potentially fail (to check for definition completeness)\n    try:\n        result = fib(30)\n        print(f\"fib(30) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")\n\n    try:\n        result = fib(50)\n        print(f\"fib(50) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")\n"}]}}}