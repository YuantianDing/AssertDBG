{"in": {"id": 0, "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_valid_date_function", "code": "import random\nfrom datetime import datetime, timedelta\n\ndef test_valid_date_function():\n    def random_date():\n        start = datetime(1900, 1, 1)\n        end = datetime(2100, 12, 31)\n        return start + (end - start) * random.random()\n\n    # Generate 1000 random valid dates\n    for _ in range(1000):\n        rand_date = random_date()\n        formatted_date = rand_date.strftime('%m-%d-%Y')\n        assert valid_date(formatted_date)\n\n    # Generate random invalid dates with the wrong date format\n    for _ in range(300):\n        year = random.randint(1900, 2100)\n        month = random.choice(range(1, 13))\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            day = random.choice(range(32, 40))\n        elif month == 2:\n            day = random.choice(range(30, 40))\n        else:\n            day = random.choice(range(31, 40))\n        formatted_date = f'{month:02}-{day:02}-{year}'\n        assert not valid_date(formatted_date)\n\n    # Edge case tests\n    assert valid_date('01-01-1900')  # Oldest date\n    assert valid_date('12-31-2100')  # Newest date\n    assert not valid_date('02-29-2021')  # Non-leap year\n    assert valid_date('02-29-2020')  # Leap year\n    assert not valid_date('04-31-2021')  # April has only 30 days\n    assert not valid_date('06-32-2020')  # Wrong day for June\n    assert not valid_date('00-10-2020')  # Invalid month 0\n    assert not valid_date('13-10-2020')  # Invalid month 13\n    assert not valid_date('03-11-200')   # Year too short\n    assert not valid_date('06/04/2020')  # Wrong format (slashes)\n    assert not valid_date('')            # Empty string"}}