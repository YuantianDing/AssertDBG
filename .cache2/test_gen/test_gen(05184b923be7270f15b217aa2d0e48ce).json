{"in": {"id": 0, "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "add_error_msg": true}, "out": {"function_name": "test_iscube_function", "code": "import random\n\ndef test_iscube_function():\n    def is_perfect_cube(n):\n        abs_n = abs(n)\n        cube_root = round(abs_n ** (1/3))\n        return cube_root ** 3 == abs_n\n\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        num = random.randint(-1000000, 1000000)\n        expected = is_perfect_cube(num)\n        assert iscube(num) == expected, f\"Failed for {num}: expected {expected}, got {iscube(num)}\"\n\n    # Specific test cases for known cubes\n    known_cubes = [0, 1, -1, 8, -8, 27, -27, 64, -64, 125, -125, 216, -216, 729, -729, 1000, -1000]\n    for cube in known_cubes:\n        assert iscube(cube) == True, f\"Failed for {cube}: expected True, got {iscube(cube)}\"\n\n    # Specific test cases for known non-cubes\n    known_non_cubes = [2, -2, 3, -3, 10, 20, 50, 99, 100, 180, 200, 500, 999, 1001]\n    for non_cube in known_non_cubes:\n        assert iscube(non_cube) == False, f\"Failed for {non_cube}: expected False, got {iscube(non_cube)}\"\n\n    # Edge cases\n    assert iscube(0) == True, \"Failed for 0\"\n    assert iscube(1) == True, \"Failed for 1\"\n    assert iscube(-1) == True, \"Failed for -1\"\n\n    print(\"All tests passed!\")"}}