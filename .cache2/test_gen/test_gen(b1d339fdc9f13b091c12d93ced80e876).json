{"in": {"id": 0, "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_filter_integers_functionality", "code": "import random\nimport string\n\n\ndef test_filter_integers_functionality():\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        random_list = [random.choice([random.randint(-1000, 1000), \n                                      random.random(), \n                                      ''.join(random.choices(string.ascii_letters, k=5)),\n                                      {}, []]) for _ in range(100)]\n        expected = [x for x in random_list if isinstance(x, int)]\n        assert filter_integers(random_list) == expected\n\n    # Edge case: empty list\n    assert filter_integers([]) == []\n\n    # Edge case: all integers\n    assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\n    # Edge case: no integers\n    assert filter_integers(['a', 3.14, {}, []]) == []\n\n    # Edge case: mix of data types\n    assert filter_integers(['a', 3.14, 5, 7, [], 'b']) == [5, 7]\n\n    # Edge case: single integer\n    assert filter_integers([42]) == [42]\n\n    # Edge case: large integers\n    assert filter_integers([2**31, 2**63]) == [2**31, 2**63]"}}