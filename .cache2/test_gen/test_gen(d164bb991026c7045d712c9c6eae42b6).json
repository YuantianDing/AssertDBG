{"in": {"id": 0, "prompt": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_max_fill_function", "code": "import random\n\ndef test_max_fill_function():\n    # Generate random test cases\n    for _ in range(1000):\n        rows = random.randint(1, 100)\n        cols = random.randint(1, 100)\n        grid = [[random.choice([0, 1]) for _ in range(cols)] for _ in range(rows)]\n        capacity = random.randint(1, 10)\n\n        total_water = sum(sum(row) for row in grid)\n        expected_lowers = math.ceil(total_water / capacity)\n\n        assert max_fill(grid, capacity) == expected_lowers\n\n    # Edge case 1: Empty grid\n    grid = [[]]\n    capacity = 3\n    assert max_fill(grid, capacity) == 0\n\n    # Edge case 2: Grid with no water\n    grid = [[0, 0, 0], [0, 0, 0]]\n    capacity = 1\n    assert max_fill(grid, capacity) == 0\n\n    # Edge case 3: Grid with exact capacity water\n    grid = [[1, 1], [1, 1]]\n    capacity = 4\n    assert max_fill(grid, capacity) == 1\n\n    # Typical case 1\n    grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\n    capacity = 1\n    assert max_fill(grid, capacity) == 6\n\n    # Typical case 2\n    grid = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n    capacity = 2\n    assert max_fill(grid, capacity) == 5\n\n    # Typical case 3\n    grid = [[0, 0, 0], [0, 0, 0]]\n    capacity = 5\n    assert max_fill(grid, capacity) == 0"}}