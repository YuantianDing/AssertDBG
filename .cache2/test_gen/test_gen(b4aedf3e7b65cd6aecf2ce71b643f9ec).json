{"in": {"id": 0, "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "add_error_msg": true}, "out": {"function_name": "test_is_nested_function", "code": "import random\n\n\ndef test_is_nested_function():\n    # Helper function to generate random brackets string\n    def random_brackets_string(length):\n        return ''.join(random.choice('[]') for _ in range(length))\n\n    # Function to manually check if a string has a nested bracket\n    def manual_check(string):\n        count = 0\n        for char in string:\n            if char == '[':\n                count += 1\n            elif char == ']':\n                count -= 1\n            # Check if the count goes below zero, which means invalid sequence\n            if count < 0:\n                return False\n        # Check if there's any occasion where count was more than 1 (which indicates nesting)\n        return count == 0 and max(count for char in string if char == '[') > 1\n\n    # Generate thousands of random bracket strings\n    for _ in range(1000):\n        brackets = random_brackets_string(100)\n        assert is_nested(brackets) == manual_check(brackets), f\"Failed on random input: {brackets}\"\n\n    # A set of specific test cases\n    test_cases = [\n        ('[[]]', True),\n        ('[]]]]]]][[[[[]', False),\n        ('[][]', False),\n        ('[]', False),\n        ('[[][]]', True),\n        ('[[]][[', True),\n        ('[[[[[[]]]]]]', True),  # Deeply nested\n        (']][[', False),         # Incorrect sequence\n        ('[][][][][[]]', True),  # Contains nested\n        ('[[][[]]]', True),      # Mixed nesting\n        (']', False),            # Single incorrect bracket\n        ('[', False),            # Single open bracket\n        ('[[[[]]]]', True),      # Multiple levels of nesting\n    ]\n\n    # Test specific cases\n    for brackets, expected in test_cases:\n        result = is_nested(brackets)\n        assert result == expected, f\"Failed on {brackets}: expected {expected}, got {result}\"\n\n    print(\"All tests passed.\")\n"}}