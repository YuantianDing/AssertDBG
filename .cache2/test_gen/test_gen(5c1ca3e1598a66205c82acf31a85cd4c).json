{"in": {"id": 0, "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_anti_shuffle", "code": "import random\nimport string\n\n\ndef test_anti_shuffle():\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        # Create a random sentence with random spaces\n        sentence = ''.join(random.choices(string.ascii_letters + ' ' * 3, k=random.randint(1, 100)))\n        words = sentence.split(' ')\n        # Expected result by sorting each word\n        expected = ' '.join(''.join(sorted(word)) for word in words)\n        assert anti_shuffle(sentence) == expected\n\n    # Individual edge case tests\n    # Test with a simple word\n    assert anti_shuffle('hello') == 'ehllo'\n    \n    # Test with punctuation\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    \n    # Test with mixed case\n    assert anti_shuffle('Hi There') == 'Hi Eehtr'\n\n    # Test with numbers and special characters\n    assert anti_shuffle('123 abc !@#') == '123 abc #!@'\n\n    # Test with single-letter words\n    assert anti_shuffle('a b c d e') == 'a b c d e'\n    \n    # Test with empty string\n    assert anti_shuffle('') == ''\n\n    # Test with spaces only\n    assert anti_shuffle('   ') == '   '  \n\n    # Test with a single space\n    assert anti_shuffle(' ') == ' '\n\n    # Test with words of varying lengths\n    assert anti_shuffle('a bb ccc dddd') == 'a bb ccc dddd'\n"}}