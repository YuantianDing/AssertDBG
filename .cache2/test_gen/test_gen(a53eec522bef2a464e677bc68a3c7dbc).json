{"in": {"id": 0, "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_order_by_points", "code": "import random\n\ndef test_order_by_points():\n    # Helper function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Generate random test cases\n    for _ in range(1000):\n        # Generate a random list of integers with length between 1 and 10\n        nums = [random.randint(-1000, 1000) for _ in range(random.randint(1, 10))]\n        \n        # Sort expected list with custom logic\n        expected = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n        \n        # Call the function and assert if the result matches the expected\n        assert order_by_points(nums) == expected, f\"Failed for list: {nums}\"\n\n    \n    # Edge cases\n    # Test with empty list\n    assert order_by_points([]) == [], \"Failed for empty list\"\n\n    # Test with all elements having the same digit sum\n    nums = [11, 20, 2, 101]  # All have sum of digits == 2\n    expected = sorted(nums, key=lambda x: nums.index(x))  # Should remain in original order\n    assert order_by_points(nums) == expected, f\"Failed for list: {nums}\"\n\n    # Test with negative and positive numbers\n    nums = [1, 11, -1, -11, -12]\n    expected = [-1, -11, 1, -12, 11]\n    assert order_by_points(nums) == expected, f\"Failed for list: {nums}\"\n\n    # Test with numbers having both positive and negative digits summing to the same\n    nums = [10, -19, -82]\n    expected = [10, -19, -82]  # Order should remain as by their original position since sums are equal\n    assert order_by_points(nums) == expected, f\"Failed for list: {nums}\"\n\n    # Test with repeated numbers\n    nums = [5, 5, 5, 6, 6, 6]\n    expected = nums[:]\n    assert order_by_points(nums) == expected, f\"Failed for list: {nums}\"\n\n    # Test with large maximum digits\n    nums = [9999, 8888, 7777, 2222]\n    expected = [2222, 8888, 7777, 9999]  # Order by digit sums 8, 32, 28, 36\n    assert order_by_points(nums) == expected, f\"Failed for list: {nums}\""}}