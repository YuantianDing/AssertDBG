{"in": {"id": 0, "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_modp_functionality", "code": "import random\n\ndef test_modp_functionality():\n    # Random test cases\n    for _ in range(1000):\n        n = random.randint(0, 1000)\n        p = random.randint(1, 1000)  # Ensure p is never 0\n        result = modp(n, p)\n        assert result == pow(2, n, p)\n        \n    # Edge cases\n    # Minimum value for n\n    assert modp(0, 101) == 1\n    # Minimum value for p\n    assert modp(3, 2) == 0\n    # Large n\n    assert modp(1000, 101) == pow(2, 1000, 101)\n    # Large p\n    assert modp(10, 10000) == pow(2, 10, 10000)\n    # n equal to p\n    assert modp(5, 5) == pow(2, 5, 5)\n    # Consecutive integers\n    for i in range(1, 5):\n        assert modp(i, i+1) == pow(2, i, i+1)"}}