{"in": {"id": 0, "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_encode_decode_shift", "code": "import random\nimport string\n\ndef test_encode_decode_shift():\n    # Generate random test cases\n    for _ in range(1000):\n        random_string = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 100)))\n        encoded = encode_shift(random_string)\n        decoded = decode_shift(encoded)\n        assert decoded == random_string\n\n    # Test edge cases\n    assert decode_shift(encode_shift(\"\")) == \"\"  # Empty string\n\n    assert decode_shift(encode_shift(\"a\")) == \"a\"  # Single character\n    assert decode_shift(encode_shift(\"z\")) == \"z\"  # Single character\n\n    assert decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"  # All letters\n    assert decode_shift(encode_shift(\"hello\")) == \"hello\"     # Small word\n    assert decode_shift(encode_shift(\"thequickbrownfoxjumpsoverthelazydog\")) == \"thequickbrownfoxjumpsoverthelazydog\" # Pangram"}}