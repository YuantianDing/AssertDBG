{"in": {"id": 0, "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_is_simple_power_function", "code": "import random\n\n\ndef test_is_simple_power_function():\n    def is_simple_power_brute_force(x, n):\n        if n <= 0:\n            return False\n        if x == 1:\n            return True\n        current_power = 1\n        while current_power < x:\n            current_power *= n\n            if current_power == x:\n                return True\n        return False\n\n    # Random test cases\n    for _ in range(10000):\n        n = random.randint(1, 100)\n        x = random.randint(1, 10**6)\n        assert is_simple_power(x, n) == is_simple_power_brute_force(x, n)\n\n    # Edge cases\n    # n equals 1\n    assert is_simple_power(1, 1) == True\n    assert is_simple_power(5, 1) == False\n\n    # x equals 1\n    assert is_simple_power(1, 10) == True\n    assert is_simple_power(1, 100) == True\n    assert is_simple_power(1, 1000) == True\n\n    # x equals n\n    assert is_simple_power(5, 5) == True\n    assert is_simple_power(10, 10) == True\n\n    # x as a large number\n    assert is_simple_power(2**20, 2) == True\n    assert is_simple_power(3**10, 3) == True\n    assert is_simple_power(5**6, 5) == True\n    assert is_simple_power(2**20 - 1, 2) == False\n\n    # Power of two rule\n    assert is_simple_power(4, 2) == True\n    assert is_simple_power(16, 2) == True\n\n    # n greater than x\n    assert is_simple_power(3, 5) == False\n    assert is_simple_power(10, 20) == False\n\n    # x is zero (not a simple power)\n    assert is_simple_power(0, 2) == False\n    assert is_simple_power(0, 10) == False"}}