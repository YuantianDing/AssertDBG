{"in": {"id": 0, "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "add_error_msg": false}, "out": {"function_name": "test_iscube_function", "code": "import random\n\n\ndef test_iscube_function():\n    def is_perfect_cube(n):\n        if n < 0:\n            n = -n\n        root = round(n ** (1/3))\n        return root ** 3 == n\n\n    # Generate thousands of random test cases\n    for _ in range(10000):\n        num = random.randint(-10**6, 10**6)\n        assert iscube(num) == is_perfect_cube(num)\n\n    # Edge case: testing zero\n    assert iscube(0)\n    \n    # Positive cubes\n    assert iscube(1) == True\n    assert iscube(8) == True\n    assert iscube(27) == True\n    assert iscube(64) == True\n    assert iscube(125) == True\n    assert iscube(1000) == True\n\n    # Negative cubes\n    assert iscube(-1) == True\n    assert iscube(-8) == True\n    assert iscube(-27) == True\n    assert iscube(-64) == True\n    assert iscube(-125) == True\n    assert iscube(-1000) == True\n\n    # Non-cube numbers\n    assert iscube(2) == False\n    assert iscube(3) == False\n    assert iscube(10) == False\n    assert iscube(20) == False\n    assert iscube(180) == False\n    assert iscube(999) == False\n    \n    # Large number test case\n    large_num = 10**12\n    assert iscube(large_num) == is_perfect_cube(large_num)"}}