{"in": {"id": 0, "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "add_error_msg": true}, "out": {"function_name": "test_split_words_function", "code": "def test_split_words_function():\n    import string\n    import random\n    \n    # Random Test Cases\n    letters = string.ascii_letters\n    whitespace_example = \"    \".join(random.choice(letters) for _ in range(10))  # Ensure spaces\n    comma_example = \",\".join(random.choice(letters) for _ in range(10))  # Ensure commas without spaces\n    \n    for _ in range(1000):\n        assert isinstance(split_words(whitespace_example), list), \"Should return a list when whitespace is present.\"\n        assert isinstance(split_words(comma_example), list), \"Should return a list when commas are present.\"\n        \n    # Specific Edge and Expected Cases\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"], \"Whitespace splitting failed.\"\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"], \"Comma splitting failed.\"\n    assert split_words(\"abcdef\") == 3, \"Count of odd lower-case character positions failed.\"\n    assert split_words(\"\") == 0, \"Empty string should return 0.\"\n    \n    all_commas = \",,,,,\"\n    assert split_words(all_commas) == all_commas.split(\",\"), \"Continuous commas should split into empty strings.\"\n    \n    no_special_chars = \"bcdefg\"\n    # In 'bcdefg', 'b', 'd', 'f' are odd positioned\n    assert split_words(no_special_chars) == 3, \"Incorrect odd position count calculation.\"\n    \n    # Random strings of letters to test odd-position calculation\n    for _ in range(1000):\n        random_str = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 50)))\n        expected_count = sum([(ord(char) - ord('a')) % 2 == 1 for char in random_str])\n        assert split_words(random_str) == expected_count, f\"Failed odd count: {random_str}\""}}