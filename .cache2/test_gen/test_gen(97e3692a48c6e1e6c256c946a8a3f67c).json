{"in": {"id": 0, "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "add_error_msg": false}, "out": {"function_name": "test_is_nested_function", "code": "import random\n\ndef test_is_nested_function():\n    # Helper function to generate a random valid or invalid nested bracket string\n    def generate_random_brackets(n):\n        brackets = ['[', ']']\n        return ''.join(random.choices(brackets, k=n))\n\n    # Generate thousands of random test cases\n    for _ in range(1000):\n        test_str = generate_random_brackets(random.randint(1, 100))\n        try:\n            result = is_nested(test_str)\n            assert isinstance(result, bool)\n        except:\n            raise AssertionError\n\n    # Edge case: empty string\n    assert is_nested('') == False\n\n    # Minimum valid input\n    assert is_nested('[]') == False\n\n    # Valid nested input\n    assert is_nested('[[]]') == True\n    assert is_nested('[[][]]') == True\n\n    # Invalid input with random brackets\n    assert is_nested('[][]') == False\n    assert is_nested('[]]]]]]][[[[[]') == False\n\n    # Edge cases:\n    assert is_nested('[[[[]]]]') == True\n    assert is_nested('[[]][[') == True\n    assert is_nested('[][[') == False\n    assert is_nested('[[]][[]]') == True\n\n    # Complex cases\n    assert is_nested('[[[]][]]') == True\n    assert is_nested('[[[][][]]]') == True\n    assert is_nested('[[][][][][][[[]]]]') == True\n    assert is_nested('[[[][]][][]]') == True\n    assert is_nested('[[]][[[[[[]]]]]]') == True\n\n    # Cases with alternating brackets\n    assert is_nested('][][][[') == False\n    assert is_nested('[[[[]')[[] == True\n\n    # Edge cases with one bracket\n    assert is_nested('[') == False\n    assert is_nested(']') == False"}}