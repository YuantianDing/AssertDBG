{"in": {"id": 0, "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "add_error_msg": false}, "out": {"function_name": "test_poly_find_zero", "code": "import random\n\ndef test_poly_find_zero():\n    # Test poly function with random test cases\n    for _ in range(1000):\n        coeffs = [random.uniform(-10, 10) for _ in range(random.randint(1, 10))]\n        x = random.uniform(-10, 10)\n        eval_1 = poly(coeffs, x)\n        eval_2 = sum([coeff * math.pow(x, i) for i, coeff in enumerate(coeffs)])\n        assert math.isclose(eval_1, eval_2, rel_tol=1e-9)\n\n    # Test find_zero function with specific test cases\n    # f(x) = 1 + 2x => 0 = 1 + 2x => x = -0.5\n    zero_1 = find_zero([1, 2])\n    assert math.isclose(zero_1, -0.5, rel_tol=1e-9)\n\n    # f(x) = -6 + 11x - 6x^2 + x^3 => (x - 1) * (x - 2) * (x - 3)\n    zero_2 = find_zero([-6, 11, -6, 1])\n    assert math.isclose(zero_2, 1.0, rel_tol=1e-9)\n\n    # Additional edge case tests\n    # f(x) = 0, trivial zero solution\n    zero_3 = find_zero([0, 0, 0, 0])\n    assert zero_3 == 0.0\n    \n    # f(x) = x^2 - 4 (coefficients: [-4, 0, 1]) roots at x=2 and x=-2\n    zero_4 = find_zero([-4, 0, 1])\n    assert zero_4 == 2.0 or zero_4 == -2.0\n\n    # f(x) = -3 + 2x (coefficients: [-3, 2]) root at x=1.5\n    zero_5 = find_zero([-3, 2])\n    assert math.isclose(zero_5, 1.5, rel_tol=1e-9)"}}