{"in": {"id": 0, "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_valid_date_function", "code": "import random\nfrom datetime import datetime\n\n\ndef test_valid_date_function():\n    # Generate random test cases\n    def random_date_string():\n        mm = random.randint(1, 12)\n        if mm in [1, 3, 5, 7, 8, 10, 12]:\n            dd = random.randint(1, 31)\n        elif mm in [4, 6, 9, 11]:\n            dd = random.randint(1, 30)\n        else:\n            dd = random.randint(1, 29)\n        yyyy = random.randint(1900, 2100)\n        return f'{mm:02}-{dd:02}-{yyyy}'\n        \n    for _ in range(1000):\n        date_str = random_date_string()\n        assert valid_date(date_str), f\"Failed for generated valid date: {date_str}\"\n\n    # Generating random invalid cases for testing\n    invalid_cases = ['00-12-2020', '13-01-2020', '04-31-2020', '06-31-2020', '02-30-2020', \n                     '2-29-2020', '02-29-2021', '', '15-11-2020', '06/11/2020', '12-32-2020',\n                     '02-00-2000']\n\n    for case in invalid_cases:\n        assert not valid_date(case), f\"Expected False for invalid date: {case}\"\n\n    # Test specific edge cases\n    # Valid leap year\n    assert valid_date('02-29-2020'), \"Failed for leap year date: 02-29-2020\"\n    # Invalid leap year\n    assert not valid_date('02-29-2019'), \"Unexpected True for non-leap year date: 02-29-2019\"\n    # Valid edge cases\n    assert valid_date('01-01-1900'), \"Failed for edge date: 01-01-1900\"\n    assert valid_date('12-31-2100'), \"Failed for edge date: 12-31-2100\"\n    # Invalid format\n    assert not valid_date('06/04/2020'), \"Unexpected True for wrong format: 06/04/2020\"\n    # Empty string\n    assert not valid_date(''), \"Unexpected True for empty date string\"\n    \n    \n# Usage:\n# Run the test_valid_date_function to verify the validity of the valid_date implementation.\ntest_valid_date_function()  # Uncomment this line to run tests."}}