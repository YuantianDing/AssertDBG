{"in": {"id": 0, "prompt": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_max_fill", "code": "import random\n\ndef test_max_fill():\n    # Random test cases generation\n    for _ in range(1000):\n        rows = random.randint(1, 100)\n        columns = random.randint(1, 100)\n        grid = [[random.choice([0, 1]) for _ in range(columns)] for _ in range(rows)]\n        capacity = random.randint(1, 10)\n\n        # Calculate the total number of 1s in the grid\n        total_water_units = sum(sum(row) for row in grid)\n\n        # The expected number of bucket uses\n        expected = math.ceil(total_water_units / capacity) if capacity > 0 else 0\n\n        # Run the function and check the result\n        result = max_fill(grid, capacity)\n        assert result == expected, f\"Failed for grid: {grid}, capacity: {capacity}. Expected {expected}, got {result}\"\n\n    # Edge case: Minimum grid size and capacity\n    assert max_fill([[1]], 1) == 1, \"Failed for smallest grid with 1 water unit\"\n    assert max_fill([[0]], 1) == 0, \"Failed for smallest grid with 0 water units\"\n\n    # Edge case: Single row with mixed water\n    assert max_fill([[1, 0, 1, 1, 0]], 2) == 2, \"Failed for single row with mixed water and capacity 2\"\n\n    # Edge case: Large bucket capacity\n    assert max_fill([[1, 1, 1]], 5) == 1, \"Failed for single row with more water units than capacity\"\n\n    # Edge case: No water in wells\n    assert max_fill([[0, 0, 0]], 3) == 0, \"Failed when all wells are dry\"\n    assert max_fill([[0, 0], [0, 0], [0, 0]], 10) == 0, \"Failed for multiple rows when all wells are dry\"\n\n    print(\"All test cases passed.\")"}}