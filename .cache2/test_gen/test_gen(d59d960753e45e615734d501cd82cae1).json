{"in": {"id": 0, "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_words_string_functionality", "code": "import random\nimport string\n\ndef test_words_string_functionality():\n    # Random test case generation\n    for _ in range(1000):\n        words = [\n            ''.join(random.choices(string.ascii_letters, k=random.randint(1, 10)))\n            for _ in range(random.randint(1, 10))\n        ]\n        separators = [',', ' ']\n        random_separators = random.choices(separators, k=len(words) - 1)\n        s = ''.join(\n            word + sep for word, sep in zip(words, random_separators + [''])\n        )\n        expected = words\n        result = words_string(s)\n        assert result == expected, f\"Failed on input: '{s}' with output: '{result}'\"\n\n    # Edge cases\n    assert words_string('') == [], \"Failed on empty string input\"\n    assert words_string('      ') == [], \"Failed on input with only spaces\"\n    assert words_string(',,,,,,') == [], \"Failed on input with only commas\"\n    assert words_string(' , , , ') == [], \"Failed on input with only mixed commas and spaces\"\n\n    # Cases with single separators\n    assert words_string('Hello,world') == ['Hello', 'world'], \"Failed on input with no spaces and single comma\"\n    assert words_string('Hello world') == ['Hello', 'world'], \"Failed on input with no commas and single space\"\n\n    # Mixed separators\n    assert words_string('Hello, my,name  is,John') == ['Hello', 'my', 'name', 'is', 'John'], \"Failed on mixed separators\"\n    assert words_string('One two,three four,five  six') == ['One', 'two', 'three', 'four', 'five', 'six'], \"Failed on mixed separators with more spaces\"\n\n    # Long string input\n    long_string = ','.join(['word'] * 1000)\n    assert words_string(long_string) == ['word'] * 1000, \"Failed on long string input\"\n\n    print(\"All test cases passed!\")\n"}}