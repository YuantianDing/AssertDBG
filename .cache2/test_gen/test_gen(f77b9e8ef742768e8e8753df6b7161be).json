{"in": {"id": 0, "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_choose_num_function", "code": "import random\n\n\ndef test_choose_num_function():\n    # Test thousands of random cases\n    for _ in range(1000):\n        x = random.randint(0, 1000)\n        y = random.randint(0, 1000)\n        expected = max([i for i in range(min(x, y), max(x, y)+1) if i % 2 == 0], default=-1)\n        assert choose_num(x, y) == expected, f\"Failed on random case with x={x}, y={y}\"\n\n    # Edge cases\n    # Case where x == y and x is even\n    assert choose_num(8, 8) == 8, \"Failed on edge case where x == y and x is even (8, 8)\"\n\n    # Case where x == y and x is odd\n    assert choose_num(9, 9) == -1, \"Failed on edge case where x == y and x is odd (9, 9)\"\n\n    # Case where range does not contain any even number\n    assert choose_num(13, 15) == -1, \"Failed on case with no even numbers (13, 15)\"\n\n    # Case where x is less than y\n    assert choose_num(10, 15) == 14, \"Failed on case where x < y (10, 15)\"\n\n    # Case where x is greater than y\n    assert choose_num(15, 10) == 14, \"Failed on case where x > y (15, 10)\"\n\n    # Case with zero included\n    assert choose_num(0, 1) == 0, \"Failed on case including zero (0, 1)\"\n\n    # Large numbers\n    assert choose_num(1000, 2000) == 2000, \"Failed on large numbers case (1000, 2000)\"\n    assert choose_num(2000, 1000) == 2000, \"Failed on large numbers reversed case (2000, 1000)\"\n\n    print(\"All tests passed!\")\n"}}