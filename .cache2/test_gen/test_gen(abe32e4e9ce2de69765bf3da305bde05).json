{"in": {"id": 0, "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_is_simple_power", "code": "import random\n\ndef test_is_simple_power():\n    # Test with thousands of random test cases\n    for _ in range(10000):\n        n = random.randint(1, 100)\n        exp = random.randint(0, 10)\n        x = n ** exp\n        assert is_simple_power(x, n), f\"Failed for x={x}, n={n}\"\n        \n        # Testing negative cases\n        x = random.randint(1, 10000)\n        if x != n ** exp:\n            assert not is_simple_power(x, n), f\"Incorrectly passed for x={x}, n={n}\"\n\n    # Manually tested cases based on the description\n    assert is_simple_power(1, 4) == True, \"Failed on example case: is_simple_power(1, 4)\"\n    assert is_simple_power(2, 2) == True, \"Failed on example case: is_simple_power(2, 2)\"\n    assert is_simple_power(8, 2) == True, \"Failed on example case: is_simple_power(8, 2)\"\n    assert is_simple_power(3, 2) == False, \"Failed on example case: is_simple_power(3, 2)\"\n    assert is_simple_power(3, 1) == False, \"Failed on example case: is_simple_power(3, 1)\"\n    assert is_simple_power(5, 3) == False, \"Failed on example case: is_simple_power(5, 3)\"\n\n    # Testing edge cases\n    assert is_simple_power(0, 10) == False, \"Failed on edge case: is_simple_power(0, 10)\"\n    assert is_simple_power(10, 1) == False, \"Failed on edge case: is_simple_power(10, 1)\"\n    assert is_simple_power(1, 1) == True, \"Failed on edge case: is_simple_power(1, 1)\"\n    \n    # Negative number tests\n    assert is_simple_power(-1, -1) == True, \"Failed on negative case: is_simple_power(-1, -1)\"\n    assert is_simple_power(-8, -2) == True, \"Failed on negative case: is_simple_power(-8, -2)\"\n\n    print(\"All tests passed!\")"}}