{"in": {"id": 0, "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_filter_integers", "code": "import random\n\n\ndef test_filter_integers():\n    # Random test cases\n    for _ in range(1000):\n        test_input = [random.choice([random.randint(0, 100), random.uniform(0, 100), random.choice([\"string\", [], {}, (), None])]) for _ in range(10)]\n        expected_output = [x for x in test_input if isinstance(x, int)]\n        assert filter_integers(test_input) == expected_output, f\"Failed for input {test_input}\"\n\n    # Edge cases\n    # All integers\n    assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Failed for input with all integers\"\n    # No integers\n    assert filter_integers(['a', 3.14, 'abc', {}, []]) == [], \"Failed for input with no integers\"\n    # Mixture with negative and positive integers\n    assert filter_integers([-1, 'b', 0, 3.5, 7, (8, 9), 2]) == [-1, 0, 7, 2], \"Failed for mixture of integers and other types\"\n    # Empty list\n    assert filter_integers([]) == [], \"Failed for empty input\"\n    # Large numbers\n    assert filter_integers([1000000000, 1.1, \"1000000000\"]) == [1000000000], \"Failed for large integers\"\n    # Mixed types with same value\n    assert filter_integers([1, 1.0, '1']) == [1], \"Failed for mixed types with same value\"\n    # Negative values\n    assert filter_integers([-5, -2.2, -3, 'negative']) == [-5, -3], \"Failed for negative integers\"\n\n# Run the test function\nif __name__ == '__main__':\n    test_filter_integers()"}}