{"in": {"id": 0, "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "add_error_msg": true}, "out": {"function_name": "test_fib_function", "code": "import random\n\n# Pre-computed Fibonacci numbers for reference\nfib_cache = {0: 0, 1: 1, 2: 1, 3: 2, 4: 3,\n             5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55,\n             11: 89, 12: 144, 13: 233, 14: 377, 15: 610,\n             16: 987, 17: 1597, 18: 2584, 19: 4181, 20: 6765,\n             21: 10946, 22: 17711, 23: 28657, 24: 46368, 25: 75025}\n\ndef test_fib_function():\n    \"\"\"Test function for the fibonacci calculation function.\"\"\"\n    # Generate random test cases\n    for _ in range(1000):\n        # Random small number to stay within reasonable limits\n        n = random.randint(0, 25)\n        expected = fib_cache[n]\n        assert fib(n) == expected, f\"Failed for random n={n}, expected {expected}, got {fib(n)}\"\n\n    # Edge cases\n    assert fib(0) == 0, \"Failed for n=0, expected 0\"\n    assert fib(1) == 1, \"Failed for n=1, expected 1\"\n\n    # Known values\n    assert fib(5) == 5, \"Failed for n=5, expected 5\"\n    assert fib(10) == 55, \"Failed for n=10, expected 55\"\n\n    # Check some values above cached ones to potentially fail (to check for definition completeness)\n    try:\n        result = fib(30)\n        print(f\"fib(30) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")\n\n    try:\n        result = fib(50)\n        print(f\"fib(50) = {result} (result may be incorrect based on cache)\")\n    except Exception as e:\n        print(f\"Handling large number case when it might fail since it's not in our cache: {e}\")\""}}