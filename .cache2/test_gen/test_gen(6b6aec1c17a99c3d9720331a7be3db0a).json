{"in": {"id": 0, "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "add_error_msg": true}, "out": {"function_name": "test_match_parens", "code": "import random\n\ndef generate_parentheses_string(length):\n    return ''.join(random.choice(['(', ')']) for _ in range(length))\n\ndef check_balance(s):\n    balance = 0\n    for char in s:\n        if char == '(': \n            balance += 1\n        else:  \n            balance -= 1\n        if balance < 0: \n            return False\n    return balance == 0\n\ndef test_match_parens():\n    # Generate thousands of random test cases\n    for _ in range(1000):\n        str1 = generate_parentheses_string(random.randint(1, 10))\n        str2 = generate_parentheses_string(random.randint(1, 10))\n        lst = [str1, str2]\n\n        # Try both concatenation orders\n        result_1 = check_balance(str1 + str2)\n        result_2 = check_balance(str2 + str1)\n        expected = result_1 or result_2\n\n        assert match_parens(lst) == ('Yes' if expected else 'No'), f\"Failed for generated input: {lst}\"\n\n    # Edge cases\n    assert match_parens(['', '']) == 'Yes', \"Empty strings should always return 'Yes'\"\n    assert match_parens(['(', ')']) == 'Yes', \"Simple balanced input\"\n    assert match_parens([')', '(']) == 'No', \"Simple unbalanced input\"\n    assert match_parens(['(((', ')))']) == 'Yes', \"Perfectly matched larger set\"\n    assert match_parens(['((()', '))']) == 'No', \"Almost balanced, but not quite\"\n    assert match_parens(['(((', '']) == 'No', \"Incomplete open parentheses\"\n    assert match_parens(['', ')))']) == 'No', \"Incomplete close parentheses\"\n\n    print(\"All tests passed.\")\n"}}