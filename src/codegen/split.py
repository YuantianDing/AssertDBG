
from .. import models
from pydantic import BaseModel, Field
from langchain_core.messages import SystemMessage, HumanMessage
from termcolor import colored
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import TerminalFormatter

class FunctionCode(BaseModel):
    """A single python function generated by the model."""
    function_name: str = Field(description="The name of the function.")
    code: str = Field(description="The generated code. "
                      "For subfunctions, only generate signature, comments and input/output assertions. "
                      "Leave the implementation empty.")
    testing_code: str = Field(description="The testing code for the function. ")

class SplittedTask(BaseModel):
    """
    A programming task that has been splitted to multiple sub-functions.
    The main function `task_func` will call the subfunctions in order to solve the task.
    The subfunctions are generated by the model.
    """
    task_func: FunctionCode = Field(description="The main function that calls the subfunctions.")
    subfunctions: list[FunctionCode] = Field(description="Each subfunctions that are called by the main function.")

    def combine(self) -> str:
        return "\n\n".join(f.code for f in [self.task_func] + self.subfunctions)
        
    def pretty_print(self, indent: str = ""):
        print(highlight(indent + self.combine().replace("\n", "\n" + indent), PythonLexer(), TerminalFormatter()))

def split(prompt: str) -> SplittedTask:
    message = [
        SystemMessage(
            "In practical software engineering, programmer often split a large task into smaller subfunctions and keep each function as small and simple as possible.\n"
            "You will be given a Pythonprogramming task and you need to split it into multiple subfunctions.\n"
            "You need to generate a main function `task_func` which may call some subfunctions in order to solve the task. \n"
            "for each subfunction, please generate:\n"
            "\n"
            "- Function signature: with types of the input and output.\n"
            "- Description of the subfunction, as docstring.\n"
            "- Input/output assertions that specify the functions' functionality.\n"
            "- Testing code (assertions) of 1-2 examples.\n"
            "\n"
            "Please make sure that the subfunctions are independent and can be called to solve the task.\n"
            "Please do not generate the implementation of the subfunctions.\n"
            "Please leave more complexity to the subfunctions, and keep the main function simple.\n"
            "You may not want to use any subfunctions when the problem is simple. \n"
            "Also please keep the description of the task as docstring in the generated code. \n"
        ),
        HumanMessage(
            f"```python\n"
            f"{prompt}\n"
            f"```\n"
        )
    ]
    return models.MODELS["split"].with_structured_output(SplittedTask).invoke(message)